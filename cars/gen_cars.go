// Code generated by "enumer -type=Car -json -text -output=gen_cars.go"; DO NOT EDIT.

package cars

import (
	"encoding/json"
	"fmt"
)

const _CarName = "Sundae"

var _CarIndex = [...]uint8{0, 6}

func (i Car) String() string {
	if i < 0 || i >= Car(len(_CarIndex)-1) {
		return fmt.Sprintf("Car(%d)", i)
	}
	return _CarName[_CarIndex[i]:_CarIndex[i+1]]
}

var _CarValues = []Car{0}

var _CarNameToValueMap = map[string]Car{
	_CarName[0:6]: 0,
}

// CarString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CarString(s string) (Car, error) {
	if val, ok := _CarNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Car values", s)
}

// CarValues returns all values of the enum
func CarValues() []Car {
	return _CarValues
}

// IsACar returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Car) IsACar() bool {
	for _, v := range _CarValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Car
func (i Car) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Car
func (i *Car) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Car should be a string, got %s", data)
	}

	var err error
	*i, err = CarString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Car
func (i Car) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Car
func (i *Car) UnmarshalText(text []byte) error {
	var err error
	*i, err = CarString(string(text))
	return err
}
