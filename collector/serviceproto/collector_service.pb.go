// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collector_service.proto

/*
Package collector_service is a generated protocol buffer package.

It is generated from these files:
	collector_service.proto

It has these top-level messages:
	StartRequest
	StopRequest
	StatusRequest
	CollectorStatus
*/
package collector_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartRequest struct {
	RunName string `protobuf:"bytes,1,opt,name=run_name,json=runName" json:"run_name,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetRunName() string {
	if m != nil {
		return m.RunName
	}
	return ""
}

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CollectorStatus struct {
	Collecting      bool   `protobuf:"varint,1,opt,name=collecting" json:"collecting,omitempty"`
	RunName         string `protobuf:"bytes,2,opt,name=run_name,json=runName" json:"run_name,omitempty"`
	Port            int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	PacketsRecorded int64  `protobuf:"varint,4,opt,name=packets_recorded,json=packetsRecorded" json:"packets_recorded,omitempty"`
}

func (m *CollectorStatus) Reset()                    { *m = CollectorStatus{} }
func (m *CollectorStatus) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatus) ProtoMessage()               {}
func (*CollectorStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CollectorStatus) GetCollecting() bool {
	if m != nil {
		return m.Collecting
	}
	return false
}

func (m *CollectorStatus) GetRunName() string {
	if m != nil {
		return m.RunName
	}
	return ""
}

func (m *CollectorStatus) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CollectorStatus) GetPacketsRecorded() int64 {
	if m != nil {
		return m.PacketsRecorded
	}
	return 0
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "StartRequest")
	proto.RegisterType((*StopRequest)(nil), "StopRequest")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*CollectorStatus)(nil), "CollectorStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	StartCollecting(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*CollectorStatus, error)
	StopCollecting(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*CollectorStatus, error)
	GetCollectorStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*CollectorStatus, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) StartCollecting(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*CollectorStatus, error) {
	out := new(CollectorStatus)
	err := grpc.Invoke(ctx, "/CollectorService/StartCollecting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) StopCollecting(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*CollectorStatus, error) {
	out := new(CollectorStatus)
	err := grpc.Invoke(ctx, "/CollectorService/StopCollecting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) GetCollectorStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*CollectorStatus, error) {
	out := new(CollectorStatus)
	err := grpc.Invoke(ctx, "/CollectorService/GetCollectorStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	StartCollecting(context.Context, *StartRequest) (*CollectorStatus, error)
	StopCollecting(context.Context, *StopRequest) (*CollectorStatus, error)
	GetCollectorStatus(context.Context, *StatusRequest) (*CollectorStatus, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_StartCollecting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).StartCollecting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CollectorService/StartCollecting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).StartCollecting(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_StopCollecting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).StopCollecting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CollectorService/StopCollecting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).StopCollecting(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_GetCollectorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).GetCollectorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CollectorService/GetCollectorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).GetCollectorStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCollecting",
			Handler:    _CollectorService_StartCollecting_Handler,
		},
		{
			MethodName: "StopCollecting",
			Handler:    _CollectorService_StopCollecting_Handler,
		},
		{
			MethodName: "GetCollectorStatus",
			Handler:    _CollectorService_GetCollectorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector_service.proto",
}

func init() { proto.RegisterFile("collector_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x2d, 0x50, 0x8e, 0xa6, 0x89, 0x6e, 0x21, 0x30, 0xa0, 0x28, 0x53, 0xba, 0x78,
	0x28, 0x0c, 0xec, 0x1d, 0xd8, 0x18, 0x9c, 0x07, 0x88, 0x8c, 0x7b, 0x42, 0x15, 0x6d, 0x1c, 0x2e,
	0x17, 0x5e, 0x82, 0xf7, 0xe1, 0xf9, 0x50, 0xd3, 0x54, 0x4d, 0xaa, 0x6e, 0xd6, 0x6f, 0xff, 0xfe,
	0xef, 0xfb, 0x0f, 0xee, 0x9d, 0xdf, 0x6c, 0xc8, 0x89, 0xe7, 0xa2, 0x26, 0xfe, 0x59, 0x3b, 0xd2,
	0x15, 0x7b, 0xf1, 0xe9, 0x1c, 0xa6, 0xb9, 0x58, 0x16, 0x43, 0xdf, 0x0d, 0xd5, 0x82, 0x0f, 0x30,
	0xe1, 0xa6, 0x2c, 0x4a, 0xbb, 0xa5, 0x58, 0x25, 0x2a, 0xbb, 0x35, 0x37, 0xdc, 0x94, 0xef, 0x76,
	0x4b, 0x69, 0x00, 0x77, 0xb9, 0xf8, 0xaa, 0x7b, 0x99, 0x86, 0x10, 0xe4, 0x62, 0xa5, 0xa9, 0x0f,
	0xc2, 0xaf, 0x82, 0x70, 0x79, 0x88, 0xd9, 0x5f, 0xe1, 0x13, 0x40, 0x97, 0xbc, 0x2e, 0x3f, 0xdb,
	0x0f, 0x27, 0xa6, 0xa7, 0x0c, 0xe2, 0x2e, 0x07, 0x71, 0x88, 0x30, 0xae, 0x3c, 0x4b, 0x3c, 0x4a,
	0x54, 0x76, 0x65, 0xda, 0x33, 0xce, 0x21, 0xaa, 0xac, 0xfb, 0x22, 0xa9, 0x0b, 0x26, 0xe7, 0x79,
	0x45, 0xab, 0x78, 0x9c, 0xa8, 0x6c, 0x64, 0xc2, 0x4e, 0x37, 0x9d, 0xbc, 0xf8, 0x53, 0x10, 0x1d,
	0xa7, 0xd9, 0x33, 0xe3, 0x0b, 0x84, 0x2d, 0xed, 0xf2, 0x38, 0x41, 0xa0, 0xfb, 0xfc, 0x8f, 0x91,
	0x3e, 0x41, 0x48, 0x2f, 0x70, 0x01, 0xb3, 0x1d, 0x78, 0xcf, 0x34, 0xd5, 0xbd, 0x26, 0xce, 0x7a,
	0x5e, 0x01, 0xdf, 0x48, 0x4e, 0xeb, 0x98, 0xe9, 0x41, 0x65, 0xe7, 0x9c, 0x1f, 0xd7, 0xed, 0x62,
	0x9e, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xea, 0xa3, 0x94, 0xb3, 0x01, 0x00, 0x00,
}
