// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalproto/data_message.proto

package data_message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataMessage struct {
	// @inject_tag: structs:"regen_enabled,indirect" csv:"regen_enabled"
	RegenEnabled *uint32 `protobuf:"varint,1,opt,name=regen_enabled,json=regenEnabled" json:"regen_enabled,omitempty"`
	// @inject_tag: structs:"regen_command,indirect" csv:"regen_command"
	RegenCommand *uint32 `protobuf:"varint,2,opt,name=regen_command,json=regenCommand" json:"regen_command,omitempty"`
	// @inject_tag: structs:"battery_power,indirect" csv:"battery_power"
	BatteryPower *uint32 `protobuf:"varint,3,opt,name=battery_power,json=batteryPower" json:"battery_power,omitempty"`
	// @inject_tag: structs:"array_power,indirect" csv:"array_power"
	ArrayPower *float32 `protobuf:"fixed32,4,opt,name=array_power,json=arrayPower" json:"array_power,omitempty"`
	// @inject_tag: structs:"reverse_on,indirect" csv:"reverse_on"
	ReverseOn *uint32 `protobuf:"varint,5,opt,name=reverse_on,json=reverseOn" json:"reverse_on,omitempty"`
	// @inject_tag: structs:"low_volt_power,indirect" csv:"low_volt_power"
	LowVoltPower *float32 `protobuf:"fixed32,6,opt,name=low_volt_power,json=lowVoltPower" json:"low_volt_power,omitempty"`
	// @inject_tag: structs:"cell_read_error,indirect" csv:"cell_read_error"
	CellReadError *int32 `protobuf:"varint,7,opt,name=cell_read_error,json=cellReadError" json:"cell_read_error,omitempty"`
	// @inject_tag: structs:"cell_bleed,indirect" csv:"cell_bleed"
	CellBleed *uint32 `protobuf:"varint,8,opt,name=cell_bleed,json=cellBleed" json:"cell_bleed,omitempty"`
	// @inject_tag: structs:"cruise_speed,indirect" csv:"cruise_speed"
	CruiseSpeed *float32 `protobuf:"fixed32,9,opt,name=cruise_speed,json=cruiseSpeed" json:"cruise_speed,omitempty"`
	// @inject_tag: structs:"hazard_lights_on,indirect" csv:"hazard_lights_on"
	HazardLightsOn *int32 `protobuf:"varint,10,opt,name=hazard_lights_on,json=hazardLightsOn" json:"hazard_lights_on,omitempty"`
	// @inject_tag: structs:"battery_voltage,indirect" csv:"battery_voltage"
	BatteryVoltage *float32 `protobuf:"fixed32,11,opt,name=battery_voltage,json=batteryVoltage" json:"battery_voltage,omitempty"`
	// @inject_tag: structs:"ltc6804_badpec,indirect" csv:"ltc6804_badpec"
	Ltc6804Badpec *uint32 `protobuf:"varint,12,opt,name=ltc6804_badpec,json=ltc6804Badpec" json:"ltc6804_badpec,omitempty"`
	// @inject_tag: structs:"bms_state,indirect" csv:"bms_state"
	BmsState *uint32 `protobuf:"varint,13,opt,name=bms_state,json=bmsState" json:"bms_state,omitempty"`
	// @inject_tag: structs:"charge_enabled,indirect" csv:"charge_enabled"
	ChargeEnabled *int32 `protobuf:"varint,14,opt,name=charge_enabled,json=chargeEnabled" json:"charge_enabled,omitempty"`
	// @inject_tag: structs:"discharge_enabled,indirect" csv:"discharge_enabled"
	DischargeEnabled *int32 `protobuf:"varint,15,opt,name=discharge_enabled,json=dischargeEnabled" json:"discharge_enabled,omitempty"`
	// @inject_tag: structs:"highside_contactor_on,indirect" csv:"highside_contactor_on"
	HighsideContactorOn *int32 `protobuf:"varint,16,opt,name=highside_contactor_on,json=highsideContactorOn" json:"highside_contactor_on,omitempty"`
	// @inject_tag: structs:"lowside_contactor_on,indirect" csv:"lowside_contactor_on"
	LowsideContactorOn *int32 `protobuf:"varint,17,opt,name=lowside_contactor_on,json=lowsideContactorOn" json:"lowside_contactor_on,omitempty"`
	// @inject_tag: structs:"precharge_on,indirect" csv:"precharge_on"
	PrechargeOn *int32 `protobuf:"varint,18,opt,name=precharge_on,json=prechargeOn" json:"precharge_on,omitempty"`
	// @inject_tag: structs:"low_volt_bus_on,indirect" csv:"low_volt_bus_on"
	LowVoltBusOn *int32 `protobuf:"varint,19,opt,name=low_volt_bus_on,json=lowVoltBusOn" json:"low_volt_bus_on,omitempty"`
	// @inject_tag: structs:"battery_temp_1,indirect" csv:"battery_temp_1"
	BatteryTemp_1 *float32 `protobuf:"fixed32,20,opt,name=battery_temp_1,json=batteryTemp1" json:"battery_temp_1,omitempty"`
	// @inject_tag: structs:"battery_temp_2,indirect" csv:"battery_temp_2"
	BatteryTemp_2 *float32 `protobuf:"fixed32,21,opt,name=battery_temp_2,json=batteryTemp2" json:"battery_temp_2,omitempty"`
	// @inject_tag: structs:"battery_temp_3,indirect" csv:"battery_temp_3"
	BatteryTemp_3 *float32 `protobuf:"fixed32,22,opt,name=battery_temp_3,json=batteryTemp3" json:"battery_temp_3,omitempty"`
	// @inject_tag: structs:"battery_temp_4,indirect" csv:"battery_temp_4"
	BatteryTemp_4 *float32 `protobuf:"fixed32,23,opt,name=battery_temp_4,json=batteryTemp4" json:"battery_temp_4,omitempty"`
	// @inject_tag: structs:"battery_temp_5,indirect" csv:"battery_temp_5"
	BatteryTemp_5 *float32 `protobuf:"fixed32,24,opt,name=battery_temp_5,json=batteryTemp5" json:"battery_temp_5,omitempty"`
	// @inject_tag: structs:"battery_temp_6,indirect" csv:"battery_temp_6"
	BatteryTemp_6 *float32 `protobuf:"fixed32,25,opt,name=battery_temp_6,json=batteryTemp6" json:"battery_temp_6,omitempty"`
	// @inject_tag: structs:"bms_precharge_battery_adc,indirect" csv:"bms_precharge_battery_adc"
	BmsPrechargeBatteryAdc *float32 `protobuf:"fixed32,26,opt,name=bms_precharge_battery_adc,json=bmsPrechargeBatteryAdc" json:"bms_precharge_battery_adc,omitempty"`
	// @inject_tag: structs:"bms_precharge_car_adc,indirect" csv:"bms_precharge_car_adc"
	BmsPrechargeCarAdc *float32 `protobuf:"fixed32,27,opt,name=bms_precharge_car_adc,json=bmsPrechargeCarAdc" json:"bms_precharge_car_adc,omitempty"`
	// @inject_tag: structs:"low_volt_output_current,indirect" csv:"low_volt_output_current"
	LowVoltOutputCurrent *float32 `protobuf:"fixed32,29,opt,name=low_volt_output_current,json=lowVoltOutputCurrent" json:"low_volt_output_current,omitempty"`
	// @inject_tag: structs:"array_current,indirect" csv:"array_current"
	ArrayCurrent *float32 `protobuf:"fixed32,30,opt,name=array_current,json=arrayCurrent" json:"array_current,omitempty"`
	// @inject_tag: structs:"battery_current,indirect" csv:"battery_current"
	BatteryCurrent *float32 `protobuf:"fixed32,31,opt,name=battery_current,json=batteryCurrent" json:"battery_current,omitempty"`
	// @inject_tag: structs:"left_motor_controller_power,indirect" csv:"left_motor_controller_power"
	LeftMotorControllerPower *float32 `protobuf:"fixed32,32,opt,name=left_motor_controller_power,json=leftMotorControllerPower" json:"left_motor_controller_power,omitempty"`
	// @inject_tag: structs:"right_motor_controller_power,indirect" csv:"right_motor_controller_power"
	RightMotorControllerPower *float32 `protobuf:"fixed32,33,opt,name=right_motor_controller_power,json=rightMotorControllerPower" json:"right_motor_controller_power,omitempty"`
	// @inject_tag: structs:"amp_hours,indirect" csv:"amp_hours"
	AmpHours *float32 `protobuf:"fixed32,34,opt,name=amp_hours,json=ampHours" json:"amp_hours,omitempty"`
	// @inject_tag: structs:"head_lights_on,indirect" csv:"head_lights_on"
	HeadLightsOn *int32 `protobuf:"varint,35,opt,name=head_lights_on,json=headLightsOn" json:"head_lights_on,omitempty"`
	// @inject_tag: structs:"brake_lights_on,indirect" csv:"brake_lights_on"
	BrakeLightsOn *int32 `protobuf:"varint,36,opt,name=brake_lights_on,json=brakeLightsOn" json:"brake_lights_on,omitempty"`
	// @inject_tag: structs:"right_blinker_on,indirect" csv:"right_blinker_on"
	RightBlinkerOn *int32 `protobuf:"varint,37,opt,name=right_blinker_on,json=rightBlinkerOn" json:"right_blinker_on,omitempty"`
	// @inject_tag: structs:"left_blinker_on,indirect" csv:"left_blinker_on"
	LeftBlinkerOn *int32 `protobuf:"varint,38,opt,name=left_blinker_on,json=leftBlinkerOn" json:"left_blinker_on,omitempty"`
	// @inject_tag: structs:"brake_pressed,indirect" csv:"brake_pressed"
	BrakePressed *int32 `protobuf:"varint,39,opt,name=brake_pressed,json=brakePressed" json:"brake_pressed,omitempty"`
	// @inject_tag: structs:"throttle_pressed,indirect" csv:"throttle_pressed"
	ThrottlePressed *int32 `protobuf:"varint,40,opt,name=throttle_pressed,json=throttlePressed" json:"throttle_pressed,omitempty"`
	// @inject_tag: structs:"drive_mode,indirect" csv:"drive_mode"
	DriveMode *uint32 `protobuf:"varint,41,opt,name=drive_mode,json=driveMode" json:"drive_mode,omitempty"`
	// @inject_tag: structs:"motor_controller_enabled,indirect" csv:"motor_controller_enabled"
	MotorControllerEnabled *int32 `protobuf:"varint,42,opt,name=motor_controller_enabled,json=motorControllerEnabled" json:"motor_controller_enabled,omitempty"`
	// @inject_tag: structs:"motor_controller_speed,indirect" csv:"motor_controller_speed"
	MotorControllerSpeed *float32 `protobuf:"fixed32,43,opt,name=motor_controller_speed,json=motorControllerSpeed" json:"motor_controller_speed,omitempty"`
	// @inject_tag: structs:"motor_controller_rpm,indirect" csv:"motor_controller_rpm"
	MotorControllerRpm *float32 `protobuf:"fixed32,44,opt,name=motor_controller_rpm,json=motorControllerRpm" json:"motor_controller_rpm,omitempty"`
	// @inject_tag: structs:"avg_odometer,indirect" csv:"avg_odometer"
	AvgOdometer *float32 `protobuf:"fixed32,45,opt,name=avg_odometer,json=avgOdometer" json:"avg_odometer,omitempty"`
	// @inject_tag: structs:"left_motor_temp,indirect" csv:"left_motor_temp"
	LeftMotorTemp *float32 `protobuf:"fixed32,46,opt,name=left_motor_temp,json=leftMotorTemp" json:"left_motor_temp,omitempty"`
	// @inject_tag: structs:"right_motor_temp,indirect" csv:"right_motor_temp"
	RightMotorTemp *float32 `protobuf:"fixed32,47,opt,name=right_motor_temp,json=rightMotorTemp" json:"right_motor_temp,omitempty"`
	// @inject_tag: structs:"left_motor_controller_temp,indirect" csv:"left_motor_controller_temp"
	LeftMotorControllerTemp *float32 `protobuf:"fixed32,48,opt,name=left_motor_controller_temp,json=leftMotorControllerTemp" json:"left_motor_controller_temp,omitempty"`
	// @inject_tag: structs:"right_motor_controller_temp,indirect" csv:"right_motor_controller_temp"
	RightMotorControllerTemp *float32 `protobuf:"fixed32,49,opt,name=right_motor_controller_temp,json=rightMotorControllerTemp" json:"right_motor_controller_temp,omitempty"`
	// @inject_tag: structs:"left_motor_controller_alive,indirect" csv:"left_motor_controller_alive"
	LeftMotorControllerAlive *float32 `protobuf:"fixed32,50,opt,name=left_motor_controller_alive,json=leftMotorControllerAlive" json:"left_motor_controller_alive,omitempty"`
	// @inject_tag: structs:"right_motor_controller_alive,indirect" csv:"right_motor_controller_alive"
	RightMotorControllerAlive *float32 `protobuf:"fixed32,51,opt,name=right_motor_controller_alive,json=rightMotorControllerAlive" json:"right_motor_controller_alive,omitempty"`
	// @inject_tag: structs:"left_motor_controller_current,indirect" csv:"left_motor_controller_current"
	LeftMotorControllerCurrent *float32 `protobuf:"fixed32,52,opt,name=left_motor_controller_current,json=leftMotorControllerCurrent" json:"left_motor_controller_current,omitempty"`
	// @inject_tag: structs:"right_motor_controller_current,indirect" csv:"right_motor_controller_current"
	RightMotorControllerCurrent *float32 `protobuf:"fixed32,53,opt,name=right_motor_controller_current,json=rightMotorControllerCurrent" json:"right_motor_controller_current,omitempty"`
	// @inject_tag: structs:"motor_controller_current_diff,indirect" csv:"motor_controller_current_diff"
	MotorControllerCurrentDiff *float32 `protobuf:"fixed32,54,opt,name=motor_controller_current_diff,json=motorControllerCurrentDiff" json:"motor_controller_current_diff,omitempty"`
	// @inject_tag: structs:"left_motor_controller_error,indirect" csv:"left_motor_controller_error"
	LeftMotorControllerError *uint32 `protobuf:"varint,55,opt,name=left_motor_controller_error,json=leftMotorControllerError" json:"left_motor_controller_error,omitempty"`
	// @inject_tag: structs:"right_motor_controller_error,indirect" csv:"right_motor_controller_error"
	RightMotorControllerError *uint32 `protobuf:"varint,56,opt,name=right_motor_controller_error,json=rightMotorControllerError" json:"right_motor_controller_error,omitempty"`
	// @inject_tag: structs:"left_motor_controller_limit,indirect" csv:"left_motor_controller_limit"
	LeftMotorControllerLimit *uint32 `protobuf:"varint,57,opt,name=left_motor_controller_limit,json=leftMotorControllerLimit" json:"left_motor_controller_limit,omitempty"`
	// @inject_tag: structs:"right_motor_controller_limit,indirect" csv:"right_motor_controller_limit"
	RightMotorControllerLimit *uint32 `protobuf:"varint,58,opt,name=right_motor_controller_limit,json=rightMotorControllerLimit" json:"right_motor_controller_limit,omitempty"`
	// @inject_tag: structs:"left_motor_controller_rx_error_count,indirect" csv:"left_motor_controller_rx_error_count"
	LeftMotorControllerRxErrorCount *uint32 `protobuf:"varint,59,opt,name=left_motor_controller_rx_error_count,json=leftMotorControllerRxErrorCount" json:"left_motor_controller_rx_error_count,omitempty"`
	// @inject_tag: structs:"right_motor_controller_rx_error_count,indirect" csv:"right_motor_controller_rx_error_count"
	RightMotorControllerRxErrorCount *uint32 `protobuf:"varint,60,opt,name=right_motor_controller_rx_error_count,json=rightMotorControllerRxErrorCount" json:"right_motor_controller_rx_error_count,omitempty"`
	// @inject_tag: structs:"left_motor_controller_tx_error_count,indirect" csv:"left_motor_controller_tx_error_count"
	LeftMotorControllerTxErrorCount *uint32 `protobuf:"varint,61,opt,name=left_motor_controller_tx_error_count,json=leftMotorControllerTxErrorCount" json:"left_motor_controller_tx_error_count,omitempty"`
	// @inject_tag: structs:"right_motor_controller_tx_error_count,indirect" csv:"right_motor_controller_tx_error_count"
	RightMotorControllerTxErrorCount *uint32 `protobuf:"varint,62,opt,name=right_motor_controller_tx_error_count,json=rightMotorControllerTxErrorCount" json:"right_motor_controller_tx_error_count,omitempty"`
	// @inject_tag: structs:"left_motor_controller_bus_voltage,indirect" csv:"left_motor_controller_bus_voltage"
	LeftMotorControllerBusVoltage *float32 `protobuf:"fixed32,63,opt,name=left_motor_controller_bus_voltage,json=leftMotorControllerBusVoltage" json:"left_motor_controller_bus_voltage,omitempty"`
	// @inject_tag: structs:"right_motor_controller_bus_voltage,indirect" csv:"right_motor_controller_bus_voltage"
	RightMotorControllerBusVoltage *float32 `protobuf:"fixed32,64,opt,name=right_motor_controller_bus_voltage,json=rightMotorControllerBusVoltage" json:"right_motor_controller_bus_voltage,omitempty"`
	// @inject_tag: structs:"left_motor_controller_15v_voltage,indirect" csv:"left_motor_controller_15v_voltage"
	LeftMotorController_15VVoltage *float32 `protobuf:"fixed32,65,opt,name=left_motor_controller_15v_voltage,json=leftMotorController15vVoltage" json:"left_motor_controller_15v_voltage,omitempty"`
	// @inject_tag: structs:"right_motor_controller_15v_voltage,indirect" csv:"right_motor_controller_15v_voltage"
	RightMotorController_15VVoltage *float32 `protobuf:"fixed32,66,opt,name=right_motor_controller_15v_voltage,json=rightMotorController15vVoltage" json:"right_motor_controller_15v_voltage,omitempty"`
	// @inject_tag: structs:"left_motor_controller_3v3_voltage,indirect" csv:"left_motor_controller_3v3_voltage"
	LeftMotorController_3V3Voltage *float32 `protobuf:"fixed32,67,opt,name=left_motor_controller_3v3_voltage,json=leftMotorController3v3Voltage" json:"left_motor_controller_3v3_voltage,omitempty"`
	// @inject_tag: structs:"right_motor_controller_3v3_voltage,indirect" csv:"right_motor_controller_3v3_voltage"
	RightMotorController_3V3Voltage *float32 `protobuf:"fixed32,68,opt,name=right_motor_controller_3v3_voltage,json=rightMotorController3v3Voltage" json:"right_motor_controller_3v3_voltage,omitempty"`
	// @inject_tag: structs:"left_motor_controller_1v9_voltage,indirect" csv:"left_motor_controller_1v9_voltage"
	LeftMotorController_1V9Voltage *float32 `protobuf:"fixed32,69,opt,name=left_motor_controller_1v9_voltage,json=leftMotorController1v9Voltage" json:"left_motor_controller_1v9_voltage,omitempty"`
	// @inject_tag: structs:"right_motor_controller_1v9_voltage,indirect" csv:"right_motor_controller_1v9_voltage"
	RightMotorController_1V9Voltage *float32 `protobuf:"fixed32,70,opt,name=right_motor_controller_1v9_voltage,json=rightMotorController1v9Voltage" json:"right_motor_controller_1v9_voltage,omitempty"`
	// @inject_tag: structs:"left_motor_controller_dsp_temp,indirect" csv:"left_motor_controller_dsp_temp"
	LeftMotorControllerDspTemp *float32 `protobuf:"fixed32,71,opt,name=left_motor_controller_dsp_temp,json=leftMotorControllerDspTemp" json:"left_motor_controller_dsp_temp,omitempty"`
	// @inject_tag: structs:"right_motor_controller_dsp_temp,indirect" csv:"right_motor_controller_dsp_temp"
	RightMotorControllerDspTemp *float32 `protobuf:"fixed32,72,opt,name=right_motor_controller_dsp_temp,json=rightMotorControllerDspTemp" json:"right_motor_controller_dsp_temp,omitempty"`
	// @inject_tag: structs:"left_motor_controller_phase_current,indirect" csv:"left_motor_controller_phase_current"
	LeftMotorControllerPhaseCurrent *float32 `protobuf:"fixed32,73,opt,name=left_motor_controller_phase_current,json=leftMotorControllerPhaseCurrent" json:"left_motor_controller_phase_current,omitempty"`
	// @inject_tag: structs:"right_motor_controller_phase_current,indirect" csv:"right_motor_controller_phase_current"
	RightMotorControllerPhaseCurrent *float32 `protobuf:"fixed32,74,opt,name=right_motor_controller_phase_current,json=rightMotorControllerPhaseCurrent" json:"right_motor_controller_phase_current,omitempty"`
	// @inject_tag: structs:"left_motor_rpm_command,indirect" csv:"left_motor_rpm_command"
	LeftMotorRpmCommand *float32 `protobuf:"fixed32,75,opt,name=left_motor_rpm_command,json=leftMotorRpmCommand" json:"left_motor_rpm_command,omitempty"`
	// @inject_tag: structs:"right_motor_rpm_command,indirect" csv:"right_motor_rpm_command"
	RightMotorRpmCommand *float32 `protobuf:"fixed32,76,opt,name=right_motor_rpm_command,json=rightMotorRpmCommand" json:"right_motor_rpm_command,omitempty"`
	// @inject_tag: structs:"left_motor_current_command,indirect" csv:"left_motor_current_command"
	LeftMotorCurrentCommand *float32 `protobuf:"fixed32,77,opt,name=left_motor_current_command,json=leftMotorCurrentCommand" json:"left_motor_current_command,omitempty"`
	// @inject_tag: structs:"right_motor_current_command,indirect" csv:"right_motor_current_command"
	RightMotorCurrentCommand *float32 `protobuf:"fixed32,78,opt,name=right_motor_current_command,json=rightMotorCurrentCommand" json:"right_motor_current_command,omitempty"`
	// @inject_tag: structs:"gps_time,indirect" csv:"gps_time"
	GpsTime *int64 `protobuf:"varint,80,opt,name=gps_time,json=gpsTime" json:"gps_time,omitempty"`
	// @inject_tag: structs:"gps_latitude,indirect" csv:"gps_latitude"
	GpsLatitude *float32 `protobuf:"fixed32,81,opt,name=gps_latitude,json=gpsLatitude" json:"gps_latitude,omitempty"`
	// @inject_tag: structs:"gps_longitude,indirect" csv:"gps_longitude"
	GpsLongitude *float32 `protobuf:"fixed32,82,opt,name=gps_longitude,json=gpsLongitude" json:"gps_longitude,omitempty"`
	// @inject_tag: structs:"gps_speed,indirect" csv:"gps_speed"
	GpsSpeed *float32 `protobuf:"fixed32,83,opt,name=gps_speed,json=gpsSpeed" json:"gps_speed,omitempty"`
	// @inject_tag: structs:"gps_altitude,indirect" csv:"gps_altitude"
	GpsAltitude *float32 `protobuf:"fixed32,84,opt,name=gps_altitude,json=gpsAltitude" json:"gps_altitude,omitempty"`
	// @inject_tag: structs:"gps_bearing,indirect" csv:"gps_bearing"
	GpsBearing *float32 `protobuf:"fixed32,85,opt,name=gps_bearing,json=gpsBearing" json:"gps_bearing,omitempty"`
	// @inject_tag: structs:"led_state,indirect" csv:"led_state"
	LedState *int32 `protobuf:"varint,86,opt,name=led_state,json=ledState" json:"led_state,omitempty"`
	// @inject_tag: structs:"mppt_array_power,indirect" csv:"mppt_array_power"
	MpptArrayPower *float32 `protobuf:"fixed32,87,opt,name=mppt_array_power,json=mpptArrayPower" json:"mppt_array_power,omitempty"`
	// @inject_tag: structs:"mppt_A0_volt_in,indirect" csv:"mppt_A0_volt_in"
	Mppt_A0VoltIn *float32 `protobuf:"fixed32,88,opt,name=mppt_A0_volt_in,json=mpptA0VoltIn" json:"mppt_A0_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_A0_volt_out,indirect" csv:"mppt_A0_volt_out"
	Mppt_A0VoltOut *float32 `protobuf:"fixed32,89,opt,name=mppt_A0_volt_out,json=mpptA0VoltOut" json:"mppt_A0_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_A0_current,indirect" csv:"mppt_A0_current"
	Mppt_A0Current *float32 `protobuf:"fixed32,90,opt,name=mppt_A0_current,json=mpptA0Current" json:"mppt_A0_current,omitempty"`
	// @inject_tag: structs:"mppt_A0_temp,indirect" csv:"mppt_A0_temp"
	Mppt_A0Temp *float32 `protobuf:"fixed32,91,opt,name=mppt_A0_temp,json=mpptA0Temp" json:"mppt_A0_temp,omitempty"`
	// @inject_tag: structs:"mppt_A1_volt_in,indirect" csv:"mppt_A1_volt_in"
	Mppt_A1VoltIn *float32 `protobuf:"fixed32,92,opt,name=mppt_A1_volt_in,json=mpptA1VoltIn" json:"mppt_A1_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_A1_volt_out,indirect" csv:"mppt_A1_volt_out"
	Mppt_A1VoltOut *float32 `protobuf:"fixed32,93,opt,name=mppt_A1_volt_out,json=mpptA1VoltOut" json:"mppt_A1_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_A1_current,indirect" csv:"mppt_A1_current"
	Mppt_A1Current *float32 `protobuf:"fixed32,94,opt,name=mppt_A1_current,json=mpptA1Current" json:"mppt_A1_current,omitempty"`
	// @inject_tag: structs:"mppt_A1_temp,indirect" csv:"mppt_A1_temp"
	Mppt_A1Temp *float32 `protobuf:"fixed32,95,opt,name=mppt_A1_temp,json=mpptA1Temp" json:"mppt_A1_temp,omitempty"`
	// @inject_tag: structs:"mppt_B0_volt_in,indirect" csv:"mppt_B0_volt_in"
	Mppt_B0VoltIn *float32 `protobuf:"fixed32,96,opt,name=mppt_B0_volt_in,json=mpptB0VoltIn" json:"mppt_B0_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_B0_volt_out,indirect" csv:"mppt_B0_volt_out"
	Mppt_B0VoltOut *float32 `protobuf:"fixed32,97,opt,name=mppt_B0_volt_out,json=mpptB0VoltOut" json:"mppt_B0_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_B0_current,indirect" csv:"mppt_B0_current"
	Mppt_B0Current *float32 `protobuf:"fixed32,98,opt,name=mppt_B0_current,json=mpptB0Current" json:"mppt_B0_current,omitempty"`
	// @inject_tag: structs:"mppt_B0_temp,indirect" csv:"mppt_B0_temp"
	Mppt_B0Temp *float32 `protobuf:"fixed32,99,opt,name=mppt_B0_temp,json=mpptB0Temp" json:"mppt_B0_temp,omitempty"`
	// @inject_tag: structs:"mppt_B1_volt_in,indirect" csv:"mppt_B1_volt_in"
	Mppt_B1VoltIn *float32 `protobuf:"fixed32,100,opt,name=mppt_B1_volt_in,json=mpptB1VoltIn" json:"mppt_B1_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_B1_volt_out,indirect" csv:"mppt_B1_volt_out"
	Mppt_B1VoltOut *float32 `protobuf:"fixed32,101,opt,name=mppt_B1_volt_out,json=mpptB1VoltOut" json:"mppt_B1_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_B1_current,indirect" csv:"mppt_B1_current"
	Mppt_B1Current *float32 `protobuf:"fixed32,102,opt,name=mppt_B1_current,json=mpptB1Current" json:"mppt_B1_current,omitempty"`
	// @inject_tag: structs:"mppt_B1_temp,indirect" csv:"mppt_B1_temp"
	Mppt_B1Temp *float32 `protobuf:"fixed32,103,opt,name=mppt_B1_temp,json=mpptB1Temp" json:"mppt_B1_temp,omitempty"`
	// @inject_tag: structs:"mppt_C0_volt_in,indirect" csv:"mppt_C0_volt_in"
	Mppt_C0VoltIn *float32 `protobuf:"fixed32,104,opt,name=mppt_C0_volt_in,json=mpptC0VoltIn" json:"mppt_C0_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_C0_volt_out,indirect" csv:"mppt_C0_volt_out"
	Mppt_C0VoltOut *float32 `protobuf:"fixed32,105,opt,name=mppt_C0_volt_out,json=mpptC0VoltOut" json:"mppt_C0_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_C0_current,indirect" csv:"mppt_C0_current"
	Mppt_C0Current *float32 `protobuf:"fixed32,106,opt,name=mppt_C0_current,json=mpptC0Current" json:"mppt_C0_current,omitempty"`
	// @inject_tag: structs:"mppt_C0_temp,indirect" csv:"mppt_C0_temp"
	Mppt_C0Temp *float32 `protobuf:"fixed32,107,opt,name=mppt_C0_temp,json=mpptC0Temp" json:"mppt_C0_temp,omitempty"`
	// @inject_tag: structs:"mppt_C1_volt_in,indirect" csv:"mppt_C1_volt_in"
	Mppt_C1VoltIn *float32 `protobuf:"fixed32,108,opt,name=mppt_C1_volt_in,json=mpptC1VoltIn" json:"mppt_C1_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_C1_volt_out,indirect" csv:"mppt_C1_volt_out"
	Mppt_C1VoltOut *float32 `protobuf:"fixed32,109,opt,name=mppt_C1_volt_out,json=mpptC1VoltOut" json:"mppt_C1_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_C1_current,indirect" csv:"mppt_C1_current"
	Mppt_C1Current *float32 `protobuf:"fixed32,110,opt,name=mppt_C1_current,json=mpptC1Current" json:"mppt_C1_current,omitempty"`
	// @inject_tag: structs:"mppt_C1_temp,indirect" csv:"mppt_C1_temp"
	Mppt_C1Temp *float32 `protobuf:"fixed32,111,opt,name=mppt_C1_temp,json=mpptC1Temp" json:"mppt_C1_temp,omitempty"`
	// @inject_tag: structs:"mppt_D0_volt_in,indirect" csv:"mppt_D0_volt_in"
	Mppt_D0VoltIn *float32 `protobuf:"fixed32,112,opt,name=mppt_D0_volt_in,json=mpptD0VoltIn" json:"mppt_D0_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_D0_volt_out,indirect" csv:"mppt_D0_volt_out"
	Mppt_D0VoltOut *float32 `protobuf:"fixed32,113,opt,name=mppt_D0_volt_out,json=mpptD0VoltOut" json:"mppt_D0_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_D0_current,indirect" csv:"mppt_D0_current"
	Mppt_D0Current *float32 `protobuf:"fixed32,114,opt,name=mppt_D0_current,json=mpptD0Current" json:"mppt_D0_current,omitempty"`
	// @inject_tag: structs:"mppt_D0_temp,indirect" csv:"mppt_D0_temp"
	Mppt_D0Temp *float32 `protobuf:"fixed32,115,opt,name=mppt_D0_temp,json=mpptD0Temp" json:"mppt_D0_temp,omitempty"`
	// @inject_tag: structs:"mppt_D1_volt_in,indirect" csv:"mppt_D1_volt_in"
	Mppt_D1VoltIn *float32 `protobuf:"fixed32,116,opt,name=mppt_D1_volt_in,json=mpptD1VoltIn" json:"mppt_D1_volt_in,omitempty"`
	// @inject_tag: structs:"mppt_D1_volt_out,indirect" csv:"mppt_D1_volt_out"
	Mppt_D1VoltOut *float32 `protobuf:"fixed32,117,opt,name=mppt_D1_volt_out,json=mpptD1VoltOut" json:"mppt_D1_volt_out,omitempty"`
	// @inject_tag: structs:"mppt_D1_current,indirect" csv:"mppt_D1_current"
	Mppt_D1Current *float32 `protobuf:"fixed32,118,opt,name=mppt_D1_current,json=mpptD1Current" json:"mppt_D1_current,omitempty"`
	// @inject_tag: structs:"mppt_D1_temp,indirect" csv:"mppt_D1_temp"
	Mppt_D1Temp *float32 `protobuf:"fixed32,119,opt,name=mppt_D1_temp,json=mpptD1Temp" json:"mppt_D1_temp,omitempty"`
	// @inject_tag: structs:"cell_volt_1,indirect" csv:"cell_volt_1"
	CellVolt_1 *float32 `protobuf:"fixed32,120,opt,name=cell_volt_1,json=cellVolt1" json:"cell_volt_1,omitempty"`
	// @inject_tag: structs:"cell_volt_2,indirect" csv:"cell_volt_2"
	CellVolt_2 *float32 `protobuf:"fixed32,121,opt,name=cell_volt_2,json=cellVolt2" json:"cell_volt_2,omitempty"`
	// @inject_tag: structs:"cell_volt_3,indirect" csv:"cell_volt_3"
	CellVolt_3 *float32 `protobuf:"fixed32,122,opt,name=cell_volt_3,json=cellVolt3" json:"cell_volt_3,omitempty"`
	// @inject_tag: structs:"cell_volt_4,indirect" csv:"cell_volt_4"
	CellVolt_4 *float32 `protobuf:"fixed32,123,opt,name=cell_volt_4,json=cellVolt4" json:"cell_volt_4,omitempty"`
	// @inject_tag: structs:"cell_volt_5,indirect" csv:"cell_volt_5"
	CellVolt_5 *float32 `protobuf:"fixed32,124,opt,name=cell_volt_5,json=cellVolt5" json:"cell_volt_5,omitempty"`
	// @inject_tag: structs:"cell_volt_6,indirect" csv:"cell_volt_6"
	CellVolt_6 *float32 `protobuf:"fixed32,125,opt,name=cell_volt_6,json=cellVolt6" json:"cell_volt_6,omitempty"`
	// @inject_tag: structs:"cell_volt_7,indirect" csv:"cell_volt_7"
	CellVolt_7 *float32 `protobuf:"fixed32,126,opt,name=cell_volt_7,json=cellVolt7" json:"cell_volt_7,omitempty"`
	// @inject_tag: structs:"cell_volt_8,indirect" csv:"cell_volt_8"
	CellVolt_8 *float32 `protobuf:"fixed32,127,opt,name=cell_volt_8,json=cellVolt8" json:"cell_volt_8,omitempty"`
	// @inject_tag: structs:"cell_volt_9,indirect" csv:"cell_volt_9"
	CellVolt_9 *float32 `protobuf:"fixed32,128,opt,name=cell_volt_9,json=cellVolt9" json:"cell_volt_9,omitempty"`
	// @inject_tag: structs:"cell_volt_10,indirect" csv:"cell_volt_10"
	CellVolt_10 *float32 `protobuf:"fixed32,129,opt,name=cell_volt_10,json=cellVolt10" json:"cell_volt_10,omitempty"`
	// @inject_tag: structs:"cell_volt_11,indirect" csv:"cell_volt_11"
	CellVolt_11 *float32 `protobuf:"fixed32,130,opt,name=cell_volt_11,json=cellVolt11" json:"cell_volt_11,omitempty"`
	// @inject_tag: structs:"cell_volt_12,indirect" csv:"cell_volt_12"
	CellVolt_12 *float32 `protobuf:"fixed32,131,opt,name=cell_volt_12,json=cellVolt12" json:"cell_volt_12,omitempty"`
	// @inject_tag: structs:"cell_volt_13,indirect" csv:"cell_volt_13"
	CellVolt_13 *float32 `protobuf:"fixed32,132,opt,name=cell_volt_13,json=cellVolt13" json:"cell_volt_13,omitempty"`
	// @inject_tag: structs:"cell_volt_14,indirect" csv:"cell_volt_14"
	CellVolt_14 *float32 `protobuf:"fixed32,133,opt,name=cell_volt_14,json=cellVolt14" json:"cell_volt_14,omitempty"`
	// @inject_tag: structs:"cell_volt_15,indirect" csv:"cell_volt_15"
	CellVolt_15 *float32 `protobuf:"fixed32,134,opt,name=cell_volt_15,json=cellVolt15" json:"cell_volt_15,omitempty"`
	// @inject_tag: structs:"cell_volt_16,indirect" csv:"cell_volt_16"
	CellVolt_16 *float32 `protobuf:"fixed32,135,opt,name=cell_volt_16,json=cellVolt16" json:"cell_volt_16,omitempty"`
	// @inject_tag: structs:"cell_volt_17,indirect" csv:"cell_volt_17"
	CellVolt_17 *float32 `protobuf:"fixed32,136,opt,name=cell_volt_17,json=cellVolt17" json:"cell_volt_17,omitempty"`
	// @inject_tag: structs:"cell_volt_18,indirect" csv:"cell_volt_18"
	CellVolt_18 *float32 `protobuf:"fixed32,137,opt,name=cell_volt_18,json=cellVolt18" json:"cell_volt_18,omitempty"`
	// @inject_tag: structs:"cell_volt_19,indirect" csv:"cell_volt_19"
	CellVolt_19 *float32 `protobuf:"fixed32,138,opt,name=cell_volt_19,json=cellVolt19" json:"cell_volt_19,omitempty"`
	// @inject_tag: structs:"cell_volt_20,indirect" csv:"cell_volt_20"
	CellVolt_20 *float32 `protobuf:"fixed32,139,opt,name=cell_volt_20,json=cellVolt20" json:"cell_volt_20,omitempty"`
	// @inject_tag: structs:"cell_volt_21,indirect" csv:"cell_volt_21"
	CellVolt_21 *float32 `protobuf:"fixed32,140,opt,name=cell_volt_21,json=cellVolt21" json:"cell_volt_21,omitempty"`
	// @inject_tag: structs:"cell_volt_22,indirect" csv:"cell_volt_22"
	CellVolt_22 *float32 `protobuf:"fixed32,141,opt,name=cell_volt_22,json=cellVolt22" json:"cell_volt_22,omitempty"`
	// @inject_tag: structs:"cell_volt_23,indirect" csv:"cell_volt_23"
	CellVolt_23 *float32 `protobuf:"fixed32,142,opt,name=cell_volt_23,json=cellVolt23" json:"cell_volt_23,omitempty"`
	// @inject_tag: structs:"cell_volt_24,indirect" csv:"cell_volt_24"
	CellVolt_24 *float32 `protobuf:"fixed32,143,opt,name=cell_volt_24,json=cellVolt24" json:"cell_volt_24,omitempty"`
	// @inject_tag: structs:"cell_volt_25,indirect" csv:"cell_volt_25"
	CellVolt_25 *float32 `protobuf:"fixed32,144,opt,name=cell_volt_25,json=cellVolt25" json:"cell_volt_25,omitempty"`
	// @inject_tag: structs:"cell_volt_26,indirect" csv:"cell_volt_26"
	CellVolt_26 *float32 `protobuf:"fixed32,145,opt,name=cell_volt_26,json=cellVolt26" json:"cell_volt_26,omitempty"`
	// @inject_tag: structs:"cell_volt_27,indirect" csv:"cell_volt_27"
	CellVolt_27 *float32 `protobuf:"fixed32,146,opt,name=cell_volt_27,json=cellVolt27" json:"cell_volt_27,omitempty"`
	// @inject_tag: structs:"cell_volt_28,indirect" csv:"cell_volt_28"
	CellVolt_28 *float32 `protobuf:"fixed32,147,opt,name=cell_volt_28,json=cellVolt28" json:"cell_volt_28,omitempty"`
	// @inject_tag: structs:"cell_volt_29,indirect" csv:"cell_volt_29"
	CellVolt_29 *float32 `protobuf:"fixed32,148,opt,name=cell_volt_29,json=cellVolt29" json:"cell_volt_29,omitempty"`
	// @inject_tag: structs:"cell_volt_30,indirect" csv:"cell_volt_30"
	CellVolt_30 *float32 `protobuf:"fixed32,149,opt,name=cell_volt_30,json=cellVolt30" json:"cell_volt_30,omitempty"`
	// @inject_tag: structs:"cell_volt_31,indirect" csv:"cell_volt_31"
	CellVolt_31 *float32 `protobuf:"fixed32,150,opt,name=cell_volt_31,json=cellVolt31" json:"cell_volt_31,omitempty"`
	// @inject_tag: structs:"cell_volt_min,indirect" csv:"cell_volt_min"
	CellVoltMin *float32 `protobuf:"fixed32,151,opt,name=cell_volt_min,json=cellVoltMin" json:"cell_volt_min,omitempty"`
	// @inject_tag: structs:"cell_volt_max,indirect" csv:"cell_volt_max"
	CellVoltMax *float32 `protobuf:"fixed32,152,opt,name=cell_volt_max,json=cellVoltMax" json:"cell_volt_max,omitempty"`
	// @inject_tag: structs:"cell_volt_avg,indirect" csv:"cell_volt_avg"
	CellVoltAvg *float32 `protobuf:"fixed32,153,opt,name=cell_volt_avg,json=cellVoltAvg" json:"cell_volt_avg,omitempty"`
	// @inject_tag: structs:"cell_volt_diff,indirect" csv:"cell_volt_diff"
	CellVoltDiff *float32 `protobuf:"fixed32,154,opt,name=cell_volt_diff,json=cellVoltDiff" json:"cell_volt_diff,omitempty"`
	// @inject_tag: structs:"power_save_on,indirect" csv:"power_save_on"
	PowerSaveOn *int32 `protobuf:"varint,155,opt,name=power_save_on,json=powerSaveOn" json:"power_save_on,omitempty"`
	// @inject_tag: structs:"rearview_on,indirect" csv:"rearview_on"
	RearviewOn *int32 `protobuf:"varint,156,opt,name=rearview_on,json=rearviewOn" json:"rearview_on,omitempty"`
	// @inject_tag: structs:"mic_enabled,indirect" csv:"mic_enabled"
	MicEnabled *int32 `protobuf:"varint,157,opt,name=mic_enabled,json=micEnabled" json:"mic_enabled,omitempty"`
	// @inject_tag: structs:"imu_temp,indirect" csv:"imu_temp"
	ImuTemp *int32 `protobuf:"varint,158,opt,name=imu_temp,json=imuTemp" json:"imu_temp,omitempty"`
	// @inject_tag: structs:"imu_magnet_x,indirect" csv:"imu_magnet_x"
	ImuMagnetX *int32 `protobuf:"varint,159,opt,name=imu_magnet_x,json=imuMagnetX" json:"imu_magnet_x,omitempty"`
	// @inject_tag: structs:"imu_magnet_y,indirect" csv:"imu_magnet_y"
	ImuMagnetY *int32 `protobuf:"varint,160,opt,name=imu_magnet_y,json=imuMagnetY" json:"imu_magnet_y,omitempty"`
	// @inject_tag: structs:"imu_magnet_z,indirect" csv:"imu_magnet_z"
	ImuMagnetZ *int32 `protobuf:"varint,161,opt,name=imu_magnet_z,json=imuMagnetZ" json:"imu_magnet_z,omitempty"`
	// @inject_tag: structs:"imu_gyro_x,indirect" csv:"imu_gyro_x"
	ImuGyroX *int32 `protobuf:"varint,162,opt,name=imu_gyro_x,json=imuGyroX" json:"imu_gyro_x,omitempty"`
	// @inject_tag: structs:"imu_gyro_y,indirect" csv:"imu_gyro_y"
	ImuGyroY *int32 `protobuf:"varint,163,opt,name=imu_gyro_y,json=imuGyroY" json:"imu_gyro_y,omitempty"`
	// @inject_tag: structs:"imu_gyro_z,indirect" csv:"imu_gyro_z"
	ImuGyroZ *int32 `protobuf:"varint,164,opt,name=imu_gyro_z,json=imuGyroZ" json:"imu_gyro_z,omitempty"`
	// @inject_tag: structs:"imu_accel_x,indirect" csv:"imu_accel_x"
	ImuAccelX *int32 `protobuf:"varint,165,opt,name=imu_accel_x,json=imuAccelX" json:"imu_accel_x,omitempty"`
	// @inject_tag: structs:"imu_accel_y,indirect" csv:"imu_accel_y"
	ImuAccelY *int32 `protobuf:"varint,166,opt,name=imu_accel_y,json=imuAccelY" json:"imu_accel_y,omitempty"`
	// @inject_tag: structs:"imu_accel_z,indirect" csv:"imu_accel_z"
	ImuAccelZ *int32 `protobuf:"varint,167,opt,name=imu_accel_z,json=imuAccelZ" json:"imu_accel_z,omitempty"`
	// @inject_tag: structs:"bms_left_motor_controller_current,indirect" csv:"bms_left_motor_controller_current"
	BmsLeftMotorControllerCurrent *float32 `protobuf:"fixed32,168,opt,name=bms_left_motor_controller_current,json=bmsLeftMotorControllerCurrent" json:"bms_left_motor_controller_current,omitempty"`
	// @inject_tag: structs:"bms_right_motor_controller_current,indirect" csv:"bms_right_motor_controller_current"
	BmsRightMotorControllerCurrent *float32 `protobuf:"fixed32,169,opt,name=bms_right_motor_controller_current,json=bmsRightMotorControllerCurrent" json:"bms_right_motor_controller_current,omitempty"`
	// @inject_tag: structs:"bms_motor_controller_current_sum,indirect" csv:"bms_motor_controller_current_sum"
	BmsMotorControllerCurrentSum *float32 `protobuf:"fixed32,170,opt,name=bms_motor_controller_current_sum,json=bmsMotorControllerCurrentSum" json:"bms_motor_controller_current_sum,omitempty"`
	// @inject_tag: structs:"packets_per_sec,indirect" csv:"packets_per_sec"
	PacketsPerSec *float32 `protobuf:"fixed32,171,opt,name=packets_per_sec,json=packetsPerSec" json:"packets_per_sec,omitempty"`
	// @inject_tag: structs:"-" csv:"time_collected" // Not in struct, b/c not data
	TimeCollected        *int64   `protobuf:"varint,172,opt,name=time_collected,json=timeCollected" json:"time_collected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMessage) Reset()         { *m = DataMessage{} }
func (m *DataMessage) String() string { return proto.CompactTextString(m) }
func (*DataMessage) ProtoMessage()    {}
func (*DataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_message_927194fc0d8b19e9, []int{0}
}
func (m *DataMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataMessage.Unmarshal(m, b)
}
func (m *DataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataMessage.Marshal(b, m, deterministic)
}
func (dst *DataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMessage.Merge(dst, src)
}
func (m *DataMessage) XXX_Size() int {
	return xxx_messageInfo_DataMessage.Size(m)
}
func (m *DataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessage proto.InternalMessageInfo

func (m *DataMessage) GetRegenEnabled() uint32 {
	if m != nil && m.RegenEnabled != nil {
		return *m.RegenEnabled
	}
	return 0
}

func (m *DataMessage) GetRegenCommand() uint32 {
	if m != nil && m.RegenCommand != nil {
		return *m.RegenCommand
	}
	return 0
}

func (m *DataMessage) GetBatteryPower() uint32 {
	if m != nil && m.BatteryPower != nil {
		return *m.BatteryPower
	}
	return 0
}

func (m *DataMessage) GetArrayPower() float32 {
	if m != nil && m.ArrayPower != nil {
		return *m.ArrayPower
	}
	return 0
}

func (m *DataMessage) GetReverseOn() uint32 {
	if m != nil && m.ReverseOn != nil {
		return *m.ReverseOn
	}
	return 0
}

func (m *DataMessage) GetLowVoltPower() float32 {
	if m != nil && m.LowVoltPower != nil {
		return *m.LowVoltPower
	}
	return 0
}

func (m *DataMessage) GetCellReadError() int32 {
	if m != nil && m.CellReadError != nil {
		return *m.CellReadError
	}
	return 0
}

func (m *DataMessage) GetCellBleed() uint32 {
	if m != nil && m.CellBleed != nil {
		return *m.CellBleed
	}
	return 0
}

func (m *DataMessage) GetCruiseSpeed() float32 {
	if m != nil && m.CruiseSpeed != nil {
		return *m.CruiseSpeed
	}
	return 0
}

func (m *DataMessage) GetHazardLightsOn() int32 {
	if m != nil && m.HazardLightsOn != nil {
		return *m.HazardLightsOn
	}
	return 0
}

func (m *DataMessage) GetBatteryVoltage() float32 {
	if m != nil && m.BatteryVoltage != nil {
		return *m.BatteryVoltage
	}
	return 0
}

func (m *DataMessage) GetLtc6804Badpec() uint32 {
	if m != nil && m.Ltc6804Badpec != nil {
		return *m.Ltc6804Badpec
	}
	return 0
}

func (m *DataMessage) GetBmsState() uint32 {
	if m != nil && m.BmsState != nil {
		return *m.BmsState
	}
	return 0
}

func (m *DataMessage) GetChargeEnabled() int32 {
	if m != nil && m.ChargeEnabled != nil {
		return *m.ChargeEnabled
	}
	return 0
}

func (m *DataMessage) GetDischargeEnabled() int32 {
	if m != nil && m.DischargeEnabled != nil {
		return *m.DischargeEnabled
	}
	return 0
}

func (m *DataMessage) GetHighsideContactorOn() int32 {
	if m != nil && m.HighsideContactorOn != nil {
		return *m.HighsideContactorOn
	}
	return 0
}

func (m *DataMessage) GetLowsideContactorOn() int32 {
	if m != nil && m.LowsideContactorOn != nil {
		return *m.LowsideContactorOn
	}
	return 0
}

func (m *DataMessage) GetPrechargeOn() int32 {
	if m != nil && m.PrechargeOn != nil {
		return *m.PrechargeOn
	}
	return 0
}

func (m *DataMessage) GetLowVoltBusOn() int32 {
	if m != nil && m.LowVoltBusOn != nil {
		return *m.LowVoltBusOn
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_1() float32 {
	if m != nil && m.BatteryTemp_1 != nil {
		return *m.BatteryTemp_1
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_2() float32 {
	if m != nil && m.BatteryTemp_2 != nil {
		return *m.BatteryTemp_2
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_3() float32 {
	if m != nil && m.BatteryTemp_3 != nil {
		return *m.BatteryTemp_3
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_4() float32 {
	if m != nil && m.BatteryTemp_4 != nil {
		return *m.BatteryTemp_4
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_5() float32 {
	if m != nil && m.BatteryTemp_5 != nil {
		return *m.BatteryTemp_5
	}
	return 0
}

func (m *DataMessage) GetBatteryTemp_6() float32 {
	if m != nil && m.BatteryTemp_6 != nil {
		return *m.BatteryTemp_6
	}
	return 0
}

func (m *DataMessage) GetBmsPrechargeBatteryAdc() float32 {
	if m != nil && m.BmsPrechargeBatteryAdc != nil {
		return *m.BmsPrechargeBatteryAdc
	}
	return 0
}

func (m *DataMessage) GetBmsPrechargeCarAdc() float32 {
	if m != nil && m.BmsPrechargeCarAdc != nil {
		return *m.BmsPrechargeCarAdc
	}
	return 0
}

func (m *DataMessage) GetLowVoltOutputCurrent() float32 {
	if m != nil && m.LowVoltOutputCurrent != nil {
		return *m.LowVoltOutputCurrent
	}
	return 0
}

func (m *DataMessage) GetArrayCurrent() float32 {
	if m != nil && m.ArrayCurrent != nil {
		return *m.ArrayCurrent
	}
	return 0
}

func (m *DataMessage) GetBatteryCurrent() float32 {
	if m != nil && m.BatteryCurrent != nil {
		return *m.BatteryCurrent
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerPower() float32 {
	if m != nil && m.LeftMotorControllerPower != nil {
		return *m.LeftMotorControllerPower
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerPower() float32 {
	if m != nil && m.RightMotorControllerPower != nil {
		return *m.RightMotorControllerPower
	}
	return 0
}

func (m *DataMessage) GetAmpHours() float32 {
	if m != nil && m.AmpHours != nil {
		return *m.AmpHours
	}
	return 0
}

func (m *DataMessage) GetHeadLightsOn() int32 {
	if m != nil && m.HeadLightsOn != nil {
		return *m.HeadLightsOn
	}
	return 0
}

func (m *DataMessage) GetBrakeLightsOn() int32 {
	if m != nil && m.BrakeLightsOn != nil {
		return *m.BrakeLightsOn
	}
	return 0
}

func (m *DataMessage) GetRightBlinkerOn() int32 {
	if m != nil && m.RightBlinkerOn != nil {
		return *m.RightBlinkerOn
	}
	return 0
}

func (m *DataMessage) GetLeftBlinkerOn() int32 {
	if m != nil && m.LeftBlinkerOn != nil {
		return *m.LeftBlinkerOn
	}
	return 0
}

func (m *DataMessage) GetBrakePressed() int32 {
	if m != nil && m.BrakePressed != nil {
		return *m.BrakePressed
	}
	return 0
}

func (m *DataMessage) GetThrottlePressed() int32 {
	if m != nil && m.ThrottlePressed != nil {
		return *m.ThrottlePressed
	}
	return 0
}

func (m *DataMessage) GetDriveMode() uint32 {
	if m != nil && m.DriveMode != nil {
		return *m.DriveMode
	}
	return 0
}

func (m *DataMessage) GetMotorControllerEnabled() int32 {
	if m != nil && m.MotorControllerEnabled != nil {
		return *m.MotorControllerEnabled
	}
	return 0
}

func (m *DataMessage) GetMotorControllerSpeed() float32 {
	if m != nil && m.MotorControllerSpeed != nil {
		return *m.MotorControllerSpeed
	}
	return 0
}

func (m *DataMessage) GetMotorControllerRpm() float32 {
	if m != nil && m.MotorControllerRpm != nil {
		return *m.MotorControllerRpm
	}
	return 0
}

func (m *DataMessage) GetAvgOdometer() float32 {
	if m != nil && m.AvgOdometer != nil {
		return *m.AvgOdometer
	}
	return 0
}

func (m *DataMessage) GetLeftMotorTemp() float32 {
	if m != nil && m.LeftMotorTemp != nil {
		return *m.LeftMotorTemp
	}
	return 0
}

func (m *DataMessage) GetRightMotorTemp() float32 {
	if m != nil && m.RightMotorTemp != nil {
		return *m.RightMotorTemp
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerTemp() float32 {
	if m != nil && m.LeftMotorControllerTemp != nil {
		return *m.LeftMotorControllerTemp
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerTemp() float32 {
	if m != nil && m.RightMotorControllerTemp != nil {
		return *m.RightMotorControllerTemp
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerAlive() float32 {
	if m != nil && m.LeftMotorControllerAlive != nil {
		return *m.LeftMotorControllerAlive
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerAlive() float32 {
	if m != nil && m.RightMotorControllerAlive != nil {
		return *m.RightMotorControllerAlive
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerCurrent() float32 {
	if m != nil && m.LeftMotorControllerCurrent != nil {
		return *m.LeftMotorControllerCurrent
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerCurrent() float32 {
	if m != nil && m.RightMotorControllerCurrent != nil {
		return *m.RightMotorControllerCurrent
	}
	return 0
}

func (m *DataMessage) GetMotorControllerCurrentDiff() float32 {
	if m != nil && m.MotorControllerCurrentDiff != nil {
		return *m.MotorControllerCurrentDiff
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerError() uint32 {
	if m != nil && m.LeftMotorControllerError != nil {
		return *m.LeftMotorControllerError
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerError() uint32 {
	if m != nil && m.RightMotorControllerError != nil {
		return *m.RightMotorControllerError
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerLimit() uint32 {
	if m != nil && m.LeftMotorControllerLimit != nil {
		return *m.LeftMotorControllerLimit
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerLimit() uint32 {
	if m != nil && m.RightMotorControllerLimit != nil {
		return *m.RightMotorControllerLimit
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerRxErrorCount() uint32 {
	if m != nil && m.LeftMotorControllerRxErrorCount != nil {
		return *m.LeftMotorControllerRxErrorCount
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerRxErrorCount() uint32 {
	if m != nil && m.RightMotorControllerRxErrorCount != nil {
		return *m.RightMotorControllerRxErrorCount
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerTxErrorCount() uint32 {
	if m != nil && m.LeftMotorControllerTxErrorCount != nil {
		return *m.LeftMotorControllerTxErrorCount
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerTxErrorCount() uint32 {
	if m != nil && m.RightMotorControllerTxErrorCount != nil {
		return *m.RightMotorControllerTxErrorCount
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerBusVoltage() float32 {
	if m != nil && m.LeftMotorControllerBusVoltage != nil {
		return *m.LeftMotorControllerBusVoltage
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerBusVoltage() float32 {
	if m != nil && m.RightMotorControllerBusVoltage != nil {
		return *m.RightMotorControllerBusVoltage
	}
	return 0
}

func (m *DataMessage) GetLeftMotorController_15VVoltage() float32 {
	if m != nil && m.LeftMotorController_15VVoltage != nil {
		return *m.LeftMotorController_15VVoltage
	}
	return 0
}

func (m *DataMessage) GetRightMotorController_15VVoltage() float32 {
	if m != nil && m.RightMotorController_15VVoltage != nil {
		return *m.RightMotorController_15VVoltage
	}
	return 0
}

func (m *DataMessage) GetLeftMotorController_3V3Voltage() float32 {
	if m != nil && m.LeftMotorController_3V3Voltage != nil {
		return *m.LeftMotorController_3V3Voltage
	}
	return 0
}

func (m *DataMessage) GetRightMotorController_3V3Voltage() float32 {
	if m != nil && m.RightMotorController_3V3Voltage != nil {
		return *m.RightMotorController_3V3Voltage
	}
	return 0
}

func (m *DataMessage) GetLeftMotorController_1V9Voltage() float32 {
	if m != nil && m.LeftMotorController_1V9Voltage != nil {
		return *m.LeftMotorController_1V9Voltage
	}
	return 0
}

func (m *DataMessage) GetRightMotorController_1V9Voltage() float32 {
	if m != nil && m.RightMotorController_1V9Voltage != nil {
		return *m.RightMotorController_1V9Voltage
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerDspTemp() float32 {
	if m != nil && m.LeftMotorControllerDspTemp != nil {
		return *m.LeftMotorControllerDspTemp
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerDspTemp() float32 {
	if m != nil && m.RightMotorControllerDspTemp != nil {
		return *m.RightMotorControllerDspTemp
	}
	return 0
}

func (m *DataMessage) GetLeftMotorControllerPhaseCurrent() float32 {
	if m != nil && m.LeftMotorControllerPhaseCurrent != nil {
		return *m.LeftMotorControllerPhaseCurrent
	}
	return 0
}

func (m *DataMessage) GetRightMotorControllerPhaseCurrent() float32 {
	if m != nil && m.RightMotorControllerPhaseCurrent != nil {
		return *m.RightMotorControllerPhaseCurrent
	}
	return 0
}

func (m *DataMessage) GetLeftMotorRpmCommand() float32 {
	if m != nil && m.LeftMotorRpmCommand != nil {
		return *m.LeftMotorRpmCommand
	}
	return 0
}

func (m *DataMessage) GetRightMotorRpmCommand() float32 {
	if m != nil && m.RightMotorRpmCommand != nil {
		return *m.RightMotorRpmCommand
	}
	return 0
}

func (m *DataMessage) GetLeftMotorCurrentCommand() float32 {
	if m != nil && m.LeftMotorCurrentCommand != nil {
		return *m.LeftMotorCurrentCommand
	}
	return 0
}

func (m *DataMessage) GetRightMotorCurrentCommand() float32 {
	if m != nil && m.RightMotorCurrentCommand != nil {
		return *m.RightMotorCurrentCommand
	}
	return 0
}

func (m *DataMessage) GetGpsTime() int64 {
	if m != nil && m.GpsTime != nil {
		return *m.GpsTime
	}
	return 0
}

func (m *DataMessage) GetGpsLatitude() float32 {
	if m != nil && m.GpsLatitude != nil {
		return *m.GpsLatitude
	}
	return 0
}

func (m *DataMessage) GetGpsLongitude() float32 {
	if m != nil && m.GpsLongitude != nil {
		return *m.GpsLongitude
	}
	return 0
}

func (m *DataMessage) GetGpsSpeed() float32 {
	if m != nil && m.GpsSpeed != nil {
		return *m.GpsSpeed
	}
	return 0
}

func (m *DataMessage) GetGpsAltitude() float32 {
	if m != nil && m.GpsAltitude != nil {
		return *m.GpsAltitude
	}
	return 0
}

func (m *DataMessage) GetGpsBearing() float32 {
	if m != nil && m.GpsBearing != nil {
		return *m.GpsBearing
	}
	return 0
}

func (m *DataMessage) GetLedState() int32 {
	if m != nil && m.LedState != nil {
		return *m.LedState
	}
	return 0
}

func (m *DataMessage) GetMpptArrayPower() float32 {
	if m != nil && m.MpptArrayPower != nil {
		return *m.MpptArrayPower
	}
	return 0
}

func (m *DataMessage) GetMppt_A0VoltIn() float32 {
	if m != nil && m.Mppt_A0VoltIn != nil {
		return *m.Mppt_A0VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_A0VoltOut() float32 {
	if m != nil && m.Mppt_A0VoltOut != nil {
		return *m.Mppt_A0VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_A0Current() float32 {
	if m != nil && m.Mppt_A0Current != nil {
		return *m.Mppt_A0Current
	}
	return 0
}

func (m *DataMessage) GetMppt_A0Temp() float32 {
	if m != nil && m.Mppt_A0Temp != nil {
		return *m.Mppt_A0Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_A1VoltIn() float32 {
	if m != nil && m.Mppt_A1VoltIn != nil {
		return *m.Mppt_A1VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_A1VoltOut() float32 {
	if m != nil && m.Mppt_A1VoltOut != nil {
		return *m.Mppt_A1VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_A1Current() float32 {
	if m != nil && m.Mppt_A1Current != nil {
		return *m.Mppt_A1Current
	}
	return 0
}

func (m *DataMessage) GetMppt_A1Temp() float32 {
	if m != nil && m.Mppt_A1Temp != nil {
		return *m.Mppt_A1Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_B0VoltIn() float32 {
	if m != nil && m.Mppt_B0VoltIn != nil {
		return *m.Mppt_B0VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_B0VoltOut() float32 {
	if m != nil && m.Mppt_B0VoltOut != nil {
		return *m.Mppt_B0VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_B0Current() float32 {
	if m != nil && m.Mppt_B0Current != nil {
		return *m.Mppt_B0Current
	}
	return 0
}

func (m *DataMessage) GetMppt_B0Temp() float32 {
	if m != nil && m.Mppt_B0Temp != nil {
		return *m.Mppt_B0Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_B1VoltIn() float32 {
	if m != nil && m.Mppt_B1VoltIn != nil {
		return *m.Mppt_B1VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_B1VoltOut() float32 {
	if m != nil && m.Mppt_B1VoltOut != nil {
		return *m.Mppt_B1VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_B1Current() float32 {
	if m != nil && m.Mppt_B1Current != nil {
		return *m.Mppt_B1Current
	}
	return 0
}

func (m *DataMessage) GetMppt_B1Temp() float32 {
	if m != nil && m.Mppt_B1Temp != nil {
		return *m.Mppt_B1Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_C0VoltIn() float32 {
	if m != nil && m.Mppt_C0VoltIn != nil {
		return *m.Mppt_C0VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_C0VoltOut() float32 {
	if m != nil && m.Mppt_C0VoltOut != nil {
		return *m.Mppt_C0VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_C0Current() float32 {
	if m != nil && m.Mppt_C0Current != nil {
		return *m.Mppt_C0Current
	}
	return 0
}

func (m *DataMessage) GetMppt_C0Temp() float32 {
	if m != nil && m.Mppt_C0Temp != nil {
		return *m.Mppt_C0Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_C1VoltIn() float32 {
	if m != nil && m.Mppt_C1VoltIn != nil {
		return *m.Mppt_C1VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_C1VoltOut() float32 {
	if m != nil && m.Mppt_C1VoltOut != nil {
		return *m.Mppt_C1VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_C1Current() float32 {
	if m != nil && m.Mppt_C1Current != nil {
		return *m.Mppt_C1Current
	}
	return 0
}

func (m *DataMessage) GetMppt_C1Temp() float32 {
	if m != nil && m.Mppt_C1Temp != nil {
		return *m.Mppt_C1Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_D0VoltIn() float32 {
	if m != nil && m.Mppt_D0VoltIn != nil {
		return *m.Mppt_D0VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_D0VoltOut() float32 {
	if m != nil && m.Mppt_D0VoltOut != nil {
		return *m.Mppt_D0VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_D0Current() float32 {
	if m != nil && m.Mppt_D0Current != nil {
		return *m.Mppt_D0Current
	}
	return 0
}

func (m *DataMessage) GetMppt_D0Temp() float32 {
	if m != nil && m.Mppt_D0Temp != nil {
		return *m.Mppt_D0Temp
	}
	return 0
}

func (m *DataMessage) GetMppt_D1VoltIn() float32 {
	if m != nil && m.Mppt_D1VoltIn != nil {
		return *m.Mppt_D1VoltIn
	}
	return 0
}

func (m *DataMessage) GetMppt_D1VoltOut() float32 {
	if m != nil && m.Mppt_D1VoltOut != nil {
		return *m.Mppt_D1VoltOut
	}
	return 0
}

func (m *DataMessage) GetMppt_D1Current() float32 {
	if m != nil && m.Mppt_D1Current != nil {
		return *m.Mppt_D1Current
	}
	return 0
}

func (m *DataMessage) GetMppt_D1Temp() float32 {
	if m != nil && m.Mppt_D1Temp != nil {
		return *m.Mppt_D1Temp
	}
	return 0
}

func (m *DataMessage) GetCellVolt_1() float32 {
	if m != nil && m.CellVolt_1 != nil {
		return *m.CellVolt_1
	}
	return 0
}

func (m *DataMessage) GetCellVolt_2() float32 {
	if m != nil && m.CellVolt_2 != nil {
		return *m.CellVolt_2
	}
	return 0
}

func (m *DataMessage) GetCellVolt_3() float32 {
	if m != nil && m.CellVolt_3 != nil {
		return *m.CellVolt_3
	}
	return 0
}

func (m *DataMessage) GetCellVolt_4() float32 {
	if m != nil && m.CellVolt_4 != nil {
		return *m.CellVolt_4
	}
	return 0
}

func (m *DataMessage) GetCellVolt_5() float32 {
	if m != nil && m.CellVolt_5 != nil {
		return *m.CellVolt_5
	}
	return 0
}

func (m *DataMessage) GetCellVolt_6() float32 {
	if m != nil && m.CellVolt_6 != nil {
		return *m.CellVolt_6
	}
	return 0
}

func (m *DataMessage) GetCellVolt_7() float32 {
	if m != nil && m.CellVolt_7 != nil {
		return *m.CellVolt_7
	}
	return 0
}

func (m *DataMessage) GetCellVolt_8() float32 {
	if m != nil && m.CellVolt_8 != nil {
		return *m.CellVolt_8
	}
	return 0
}

func (m *DataMessage) GetCellVolt_9() float32 {
	if m != nil && m.CellVolt_9 != nil {
		return *m.CellVolt_9
	}
	return 0
}

func (m *DataMessage) GetCellVolt_10() float32 {
	if m != nil && m.CellVolt_10 != nil {
		return *m.CellVolt_10
	}
	return 0
}

func (m *DataMessage) GetCellVolt_11() float32 {
	if m != nil && m.CellVolt_11 != nil {
		return *m.CellVolt_11
	}
	return 0
}

func (m *DataMessage) GetCellVolt_12() float32 {
	if m != nil && m.CellVolt_12 != nil {
		return *m.CellVolt_12
	}
	return 0
}

func (m *DataMessage) GetCellVolt_13() float32 {
	if m != nil && m.CellVolt_13 != nil {
		return *m.CellVolt_13
	}
	return 0
}

func (m *DataMessage) GetCellVolt_14() float32 {
	if m != nil && m.CellVolt_14 != nil {
		return *m.CellVolt_14
	}
	return 0
}

func (m *DataMessage) GetCellVolt_15() float32 {
	if m != nil && m.CellVolt_15 != nil {
		return *m.CellVolt_15
	}
	return 0
}

func (m *DataMessage) GetCellVolt_16() float32 {
	if m != nil && m.CellVolt_16 != nil {
		return *m.CellVolt_16
	}
	return 0
}

func (m *DataMessage) GetCellVolt_17() float32 {
	if m != nil && m.CellVolt_17 != nil {
		return *m.CellVolt_17
	}
	return 0
}

func (m *DataMessage) GetCellVolt_18() float32 {
	if m != nil && m.CellVolt_18 != nil {
		return *m.CellVolt_18
	}
	return 0
}

func (m *DataMessage) GetCellVolt_19() float32 {
	if m != nil && m.CellVolt_19 != nil {
		return *m.CellVolt_19
	}
	return 0
}

func (m *DataMessage) GetCellVolt_20() float32 {
	if m != nil && m.CellVolt_20 != nil {
		return *m.CellVolt_20
	}
	return 0
}

func (m *DataMessage) GetCellVolt_21() float32 {
	if m != nil && m.CellVolt_21 != nil {
		return *m.CellVolt_21
	}
	return 0
}

func (m *DataMessage) GetCellVolt_22() float32 {
	if m != nil && m.CellVolt_22 != nil {
		return *m.CellVolt_22
	}
	return 0
}

func (m *DataMessage) GetCellVolt_23() float32 {
	if m != nil && m.CellVolt_23 != nil {
		return *m.CellVolt_23
	}
	return 0
}

func (m *DataMessage) GetCellVolt_24() float32 {
	if m != nil && m.CellVolt_24 != nil {
		return *m.CellVolt_24
	}
	return 0
}

func (m *DataMessage) GetCellVolt_25() float32 {
	if m != nil && m.CellVolt_25 != nil {
		return *m.CellVolt_25
	}
	return 0
}

func (m *DataMessage) GetCellVolt_26() float32 {
	if m != nil && m.CellVolt_26 != nil {
		return *m.CellVolt_26
	}
	return 0
}

func (m *DataMessage) GetCellVolt_27() float32 {
	if m != nil && m.CellVolt_27 != nil {
		return *m.CellVolt_27
	}
	return 0
}

func (m *DataMessage) GetCellVolt_28() float32 {
	if m != nil && m.CellVolt_28 != nil {
		return *m.CellVolt_28
	}
	return 0
}

func (m *DataMessage) GetCellVolt_29() float32 {
	if m != nil && m.CellVolt_29 != nil {
		return *m.CellVolt_29
	}
	return 0
}

func (m *DataMessage) GetCellVolt_30() float32 {
	if m != nil && m.CellVolt_30 != nil {
		return *m.CellVolt_30
	}
	return 0
}

func (m *DataMessage) GetCellVolt_31() float32 {
	if m != nil && m.CellVolt_31 != nil {
		return *m.CellVolt_31
	}
	return 0
}

func (m *DataMessage) GetCellVoltMin() float32 {
	if m != nil && m.CellVoltMin != nil {
		return *m.CellVoltMin
	}
	return 0
}

func (m *DataMessage) GetCellVoltMax() float32 {
	if m != nil && m.CellVoltMax != nil {
		return *m.CellVoltMax
	}
	return 0
}

func (m *DataMessage) GetCellVoltAvg() float32 {
	if m != nil && m.CellVoltAvg != nil {
		return *m.CellVoltAvg
	}
	return 0
}

func (m *DataMessage) GetCellVoltDiff() float32 {
	if m != nil && m.CellVoltDiff != nil {
		return *m.CellVoltDiff
	}
	return 0
}

func (m *DataMessage) GetPowerSaveOn() int32 {
	if m != nil && m.PowerSaveOn != nil {
		return *m.PowerSaveOn
	}
	return 0
}

func (m *DataMessage) GetRearviewOn() int32 {
	if m != nil && m.RearviewOn != nil {
		return *m.RearviewOn
	}
	return 0
}

func (m *DataMessage) GetMicEnabled() int32 {
	if m != nil && m.MicEnabled != nil {
		return *m.MicEnabled
	}
	return 0
}

func (m *DataMessage) GetImuTemp() int32 {
	if m != nil && m.ImuTemp != nil {
		return *m.ImuTemp
	}
	return 0
}

func (m *DataMessage) GetImuMagnetX() int32 {
	if m != nil && m.ImuMagnetX != nil {
		return *m.ImuMagnetX
	}
	return 0
}

func (m *DataMessage) GetImuMagnetY() int32 {
	if m != nil && m.ImuMagnetY != nil {
		return *m.ImuMagnetY
	}
	return 0
}

func (m *DataMessage) GetImuMagnetZ() int32 {
	if m != nil && m.ImuMagnetZ != nil {
		return *m.ImuMagnetZ
	}
	return 0
}

func (m *DataMessage) GetImuGyroX() int32 {
	if m != nil && m.ImuGyroX != nil {
		return *m.ImuGyroX
	}
	return 0
}

func (m *DataMessage) GetImuGyroY() int32 {
	if m != nil && m.ImuGyroY != nil {
		return *m.ImuGyroY
	}
	return 0
}

func (m *DataMessage) GetImuGyroZ() int32 {
	if m != nil && m.ImuGyroZ != nil {
		return *m.ImuGyroZ
	}
	return 0
}

func (m *DataMessage) GetImuAccelX() int32 {
	if m != nil && m.ImuAccelX != nil {
		return *m.ImuAccelX
	}
	return 0
}

func (m *DataMessage) GetImuAccelY() int32 {
	if m != nil && m.ImuAccelY != nil {
		return *m.ImuAccelY
	}
	return 0
}

func (m *DataMessage) GetImuAccelZ() int32 {
	if m != nil && m.ImuAccelZ != nil {
		return *m.ImuAccelZ
	}
	return 0
}

func (m *DataMessage) GetBmsLeftMotorControllerCurrent() float32 {
	if m != nil && m.BmsLeftMotorControllerCurrent != nil {
		return *m.BmsLeftMotorControllerCurrent
	}
	return 0
}

func (m *DataMessage) GetBmsRightMotorControllerCurrent() float32 {
	if m != nil && m.BmsRightMotorControllerCurrent != nil {
		return *m.BmsRightMotorControllerCurrent
	}
	return 0
}

func (m *DataMessage) GetBmsMotorControllerCurrentSum() float32 {
	if m != nil && m.BmsMotorControllerCurrentSum != nil {
		return *m.BmsMotorControllerCurrentSum
	}
	return 0
}

func (m *DataMessage) GetPacketsPerSec() float32 {
	if m != nil && m.PacketsPerSec != nil {
		return *m.PacketsPerSec
	}
	return 0
}

func (m *DataMessage) GetTimeCollected() int64 {
	if m != nil && m.TimeCollected != nil {
		return *m.TimeCollected
	}
	return 0
}

func init() {
	proto.RegisterType((*DataMessage)(nil), "DataMessage")
}

func init() {
	proto.RegisterFile("internalproto/data_message.proto", fileDescriptor_data_message_927194fc0d8b19e9)
}

var fileDescriptor_data_message_927194fc0d8b19e9 = []byte{
	// 2328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x99, 0x77, 0x7f, 0xdc, 0xb6,
	0x19, 0xc7, 0x3f, 0x4a, 0x9a, 0x5a, 0x86, 0x66, 0xe8, 0xf5, 0xd8, 0x8a, 0x64, 0xc9, 0x53, 0x69,
	0xda, 0x44, 0xe4, 0xe9, 0x34, 0x92, 0xba, 0xa9, 0xee, 0xce, 0xb5, 0x9d, 0x48, 0x91, 0x2a, 0xb9,
	0xae, 0xed, 0x0e, 0x16, 0x47, 0x42, 0x14, 0x6b, 0xae, 0x82, 0xbc, 0x93, 0xe4, 0xee, 0xbd, 0xf7,
	0xde, 0x7b, 0xf7, 0x65, 0xf5, 0x85, 0xe4, 0x03, 0x80, 0x03, 0x04, 0x49, 0x3b, 0x7f, 0xea, 0x79,
	0xbe, 0xcf, 0x83, 0x1f, 0x7f, 0x07, 0x80, 0x20, 0x84, 0xe6, 0xdd, 0x20, 0x21, 0x34, 0xc0, 0x5e,
	0x44, 0xc3, 0x24, 0x7c, 0xc5, 0xc6, 0x09, 0x36, 0x7d, 0x12, 0xc7, 0xd8, 0x21, 0x2f, 0xf3, 0xd0,
	0xa5, 0xff, 0xbf, 0x8a, 0xc6, 0x7a, 0x38, 0xc1, 0x5b, 0x22, 0xaa, 0x5d, 0x46, 0x13, 0x94, 0x38,
	0x24, 0x30, 0x49, 0x80, 0xfb, 0x1e, 0xb1, 0x61, 0x64, 0x7e, 0x64, 0x71, 0x62, 0x77, 0x9c, 0x07,
	0x6f, 0x8a, 0x58, 0x01, 0x59, 0xa1, 0xef, 0xe3, 0xc0, 0x86, 0x67, 0x24, 0xa8, 0x2b, 0x62, 0x0c,
	0xea, 0xe3, 0x24, 0x21, 0xf4, 0xd8, 0x8c, 0xc2, 0x43, 0x42, 0xe1, 0x59, 0x01, 0xa5, 0xc1, 0x1d,
	0x16, 0xd3, 0x2e, 0xa2, 0x31, 0x4c, 0x29, 0xce, 0x90, 0x77, 0xcd, 0x8f, 0x2c, 0x3e, 0xb3, 0x8b,
	0x78, 0x48, 0x00, 0xb3, 0x08, 0x51, 0x32, 0x24, 0x34, 0x26, 0x66, 0x18, 0xc0, 0x73, 0xbc, 0xc5,
	0xc9, 0x34, 0xb2, 0x1d, 0x68, 0x57, 0xd0, 0xa4, 0x17, 0x1e, 0x9a, 0xc3, 0xd0, 0x4b, 0xd2, 0x16,
	0xef, 0xe6, 0x2d, 0xc6, 0xbd, 0xf0, 0xf0, 0x5e, 0xe8, 0x25, 0xa2, 0xc9, 0x35, 0x34, 0x65, 0x11,
	0xcf, 0x33, 0x29, 0xc1, 0xb6, 0x49, 0x28, 0x0d, 0x29, 0x9c, 0x98, 0x1f, 0x59, 0x7c, 0x6e, 0x77,
	0x82, 0x85, 0x77, 0x09, 0xb6, 0x6f, 0xb2, 0x20, 0x1b, 0x8c, 0x73, 0x7d, 0x8f, 0x10, 0x1b, 0x46,
	0xc5, 0x60, 0x2c, 0xd2, 0x61, 0x01, 0x6d, 0x01, 0x8d, 0x5b, 0x74, 0xe0, 0xc6, 0xc4, 0x8c, 0x23,
	0x06, 0x9c, 0xe4, 0x43, 0x8d, 0x89, 0xd8, 0x1e, 0x0b, 0x69, 0x8b, 0x68, 0xfa, 0x00, 0x3f, 0xc6,
	0xd4, 0x36, 0x3d, 0xd7, 0x39, 0x48, 0x62, 0x26, 0x1a, 0xf1, 0xa1, 0x26, 0x45, 0x7c, 0x93, 0x87,
	0xb7, 0x03, 0xed, 0x3a, 0x9a, 0xca, 0xec, 0x61, 0xea, 0xb1, 0x43, 0x60, 0x8c, 0xf7, 0x9b, 0x4c,
	0xc3, 0xf7, 0x44, 0x54, 0xbb, 0x8a, 0x26, 0xbd, 0xc4, 0x5a, 0x59, 0x5b, 0x5a, 0x36, 0xfb, 0xd8,
	0x8e, 0x88, 0x05, 0xe3, 0x5c, 0xd8, 0x44, 0x1a, 0xed, 0xf0, 0xa0, 0x36, 0x83, 0x4e, 0xf6, 0xfd,
	0xd8, 0x8c, 0x13, 0x9c, 0x10, 0x98, 0xe0, 0xc4, 0x68, 0xdf, 0x8f, 0xf7, 0xd8, 0xdf, 0xac, 0x87,
	0x75, 0x80, 0xa9, 0x43, 0xf2, 0x9f, 0x75, 0x32, 0x7d, 0x7e, 0x1e, 0xcd, 0x7e, 0xd7, 0x97, 0xd0,
	0xf3, 0xb6, 0x1b, 0x2b, 0xe4, 0x14, 0x27, 0xa7, 0xf3, 0x44, 0x06, 0x1b, 0xe8, 0xcc, 0x81, 0xeb,
	0x1c, 0xc4, 0xae, 0x4d, 0x4c, 0x2b, 0x0c, 0x12, 0x6c, 0x25, 0x21, 0x65, 0xcf, 0x3b, 0xcd, 0x0b,
	0x4e, 0x65, 0xc9, 0x6e, 0x96, 0xdb, 0x0e, 0xb4, 0x25, 0x74, 0xda, 0x0b, 0x0f, 0xab, 0x25, 0xcf,
	0xf3, 0x12, 0x2d, 0xcd, 0xc9, 0x15, 0x0b, 0x68, 0x3c, 0xa2, 0x24, 0x95, 0x14, 0x06, 0xa0, 0x71,
	0x72, 0x2c, 0x8f, 0x6d, 0x07, 0xda, 0x55, 0x34, 0x95, 0xcf, 0x81, 0xfe, 0x80, 0x5b, 0x7e, 0x8a,
	0x53, 0xd9, 0x24, 0xe8, 0x0c, 0x62, 0x31, 0x55, 0x32, 0xc3, 0x13, 0xe2, 0x47, 0xa6, 0x0e, 0xa7,
	0xc5, 0x54, 0x49, 0xa3, 0x77, 0x89, 0x1f, 0xe9, 0x15, 0xca, 0x80, 0x33, 0x15, 0xca, 0xa8, 0x50,
	0x2d, 0x38, 0x5b, 0xa1, 0x5a, 0x15, 0x6a, 0x19, 0xce, 0x55, 0xa8, 0xe5, 0x0a, 0xd5, 0x06, 0xa8,
	0x50, 0xed, 0x0a, 0xb5, 0x02, 0xe7, 0x2b, 0xd4, 0x8a, 0xb6, 0x8e, 0xce, 0xb3, 0x49, 0x50, 0x38,
	0x96, 0xd5, 0x60, 0xdb, 0x82, 0x0b, 0xbc, 0xe0, 0x6c, 0xdf, 0x8f, 0x77, 0xb2, 0x7c, 0x47, 0xa4,
	0x37, 0x6c, 0x4b, 0xd3, 0xd1, 0x99, 0x72, 0xa9, 0x85, 0x29, 0x2f, 0x9b, 0xe1, 0x65, 0x9a, 0x5c,
	0xd6, 0xc5, 0x94, 0x95, 0xb4, 0xd1, 0xb9, 0xdc, 0xf8, 0x70, 0x90, 0x44, 0x83, 0xc4, 0xb4, 0x06,
	0x94, 0x92, 0x20, 0x81, 0x59, 0x5e, 0x74, 0x3a, 0xfd, 0x01, 0xb6, 0x79, 0xb2, 0x2b, 0x72, 0x6c,
	0x63, 0x10, 0x6b, 0x3e, 0x83, 0xe7, 0xc4, 0x93, 0xf0, 0x60, 0x06, 0x49, 0xcb, 0x23, 0xc3, 0x2e,
	0x96, 0x96, 0x47, 0x06, 0xde, 0x40, 0x33, 0x1e, 0xd9, 0x4f, 0x4c, 0x3f, 0x64, 0x73, 0x89, 0xcd,
	0x2a, 0x1a, 0x7a, 0x1e, 0xa1, 0xe9, 0x76, 0x30, 0xcf, 0x8b, 0x80, 0x21, 0x5b, 0x8c, 0xe8, 0xe6,
	0x80, 0xd8, 0x1a, 0x5e, 0x47, 0x2f, 0x50, 0xb6, 0x24, 0x9b, 0xea, 0x17, 0x78, 0xfd, 0x79, 0xce,
	0xd4, 0x36, 0x98, 0x41, 0x27, 0xb1, 0x1f, 0x99, 0x07, 0xe1, 0x80, 0xc6, 0x70, 0x89, 0xd3, 0xa3,
	0xd8, 0x8f, 0x6e, 0xb3, 0xbf, 0xd9, 0xaf, 0x76, 0xc0, 0xf6, 0x9c, 0x62, 0x33, 0xb8, 0x2c, 0x66,
	0x26, 0x8b, 0xe6, 0x5b, 0xc1, 0x35, 0x34, 0xd5, 0xa7, 0xf8, 0x11, 0x91, 0xb0, 0x2b, 0x62, 0x79,
	0xf2, 0x70, 0xce, 0x2d, 0xa2, 0x69, 0xa1, 0xb5, 0xef, 0xb9, 0xc1, 0x23, 0xc2, 0x57, 0xce, 0x55,
	0xb1, 0xb9, 0xf0, 0x78, 0x47, 0x84, 0x45, 0x47, 0x6e, 0x8a, 0x04, 0x5e, 0x13, 0x1d, 0x59, 0xb8,
	0xe0, 0xd8, 0x1e, 0xcd, 0x47, 0x8e, 0x28, 0x89, 0x63, 0x62, 0xc3, 0x75, 0x21, 0x8f, 0x07, 0x77,
	0x44, 0x4c, 0x7b, 0x11, 0x4d, 0x27, 0x07, 0x34, 0x4c, 0x12, 0xaf, 0xe0, 0x16, 0x39, 0x37, 0x95,
	0xc5, 0x33, 0x74, 0x16, 0x21, 0x9b, 0xba, 0x43, 0x62, 0xfa, 0xa1, 0x4d, 0xe0, 0x45, 0xb1, 0x81,
	0xf2, 0xc8, 0x56, 0x68, 0x13, 0x6d, 0x0d, 0x41, 0xc5, 0xe6, 0x6c, 0x9b, 0x79, 0x0f, 0xef, 0x78,
	0xd6, 0x2f, 0x7b, 0x9c, 0x6d, 0x36, 0xcb, 0xe8, 0x6c, 0xa5, 0x52, 0x6c, 0xc2, 0x2f, 0x89, 0x99,
	0xa6, 0xd4, 0x89, 0xdd, 0x78, 0x09, 0x9d, 0xae, 0x54, 0xd1, 0xc8, 0x87, 0xf7, 0x8a, 0x29, 0xad,
	0xd4, 0xec, 0x46, 0x3e, 0xdb, 0x6e, 0xf0, 0xd0, 0x31, 0x43, 0x3b, 0xf4, 0x49, 0x42, 0x28, 0xbc,
	0x4f, 0x6c, 0xf1, 0x78, 0xe8, 0x6c, 0xa7, 0xa1, 0xdc, 0x5b, 0xd1, 0x99, 0x2d, 0x46, 0x78, 0x99,
	0x53, 0x13, 0xf9, 0x24, 0x63, 0x8b, 0xb1, 0xf8, 0xb5, 0x24, 0xf0, 0x15, 0x31, 0x85, 0x8b, 0xd9,
	0xc4, 0xc9, 0xd7, 0xd0, 0x85, 0xfa, 0x29, 0xcc, 0x6b, 0x96, 0x78, 0xcd, 0xb9, 0x9a, 0x19, 0xcc,
	0x8b, 0x6f, 0xa0, 0x99, 0x86, 0x09, 0xcc, 0xab, 0x75, 0x31, 0xff, 0xeb, 0xe6, 0x6f, 0x56, 0x5e,
	0x3f, 0x36, 0xf6, 0xdc, 0x21, 0x01, 0xa3, 0x71, 0xf9, 0x6c, 0xb0, 0xfc, 0x13, 0x96, 0x8f, 0xa8,
	0x6f, 0x35, 0x2f, 0x1f, 0xd1, 0x60, 0x03, 0xcd, 0xd6, 0x8f, 0x9f, 0xad, 0xfa, 0x65, 0xde, 0xe1,
	0x42, 0x8d, 0x82, 0x6c, 0x07, 0xe8, 0xa2, 0xb9, 0x06, 0x0d, 0x59, 0x8f, 0x36, 0xef, 0x31, 0x53,
	0xa7, 0x22, 0x6b, 0xb2, 0x81, 0x66, 0x9b, 0xca, 0x4d, 0xdb, 0xdd, 0xdf, 0x87, 0x15, 0xa1, 0xc3,
	0xaf, 0x2d, 0xef, 0xb9, 0xfb, 0xfb, 0xcd, 0x56, 0x8a, 0x13, 0xc7, 0x2a, 0x5f, 0x0d, 0x75, 0x56,
	0x8a, 0xc3, 0x47, 0xb3, 0x95, 0xa2, 0x7e, 0x8d, 0xd7, 0xd7, 0x5a, 0x29, 0x1a, 0x34, 0x8e, 0xef,
	0xb9, 0xbe, 0x9b, 0xc0, 0x7a, 0xe3, 0xf8, 0x9b, 0x2c, 0xff, 0x84, 0xf1, 0x45, 0xfd, 0xab, 0xcd,
	0xe3, 0x8b, 0x06, 0x5b, 0xe8, 0x4a, 0xfd, 0xf8, 0xf4, 0x48, 0x3c, 0x82, 0x69, 0x85, 0x83, 0x20,
	0x81, 0xd7, 0x78, 0xa3, 0x8b, 0x35, 0x42, 0x76, 0x8f, 0xf8, 0x93, 0x74, 0x19, 0xa6, 0x6d, 0xa3,
	0xab, 0x0d, 0x7a, 0x94, 0x7e, 0xef, 0xe7, 0xfd, 0xe6, 0xeb, 0x84, 0x95, 0x1a, 0x36, 0xea, 0x4b,
	0xca, 0xfd, 0x6e, 0x34, 0xea, 0xbb, 0xfb, 0xce, 0xf4, 0x29, 0xfd, 0x3e, 0xd0, 0xac, 0xaf, 0xd4,
	0xf0, 0x36, 0x5a, 0xa8, 0xd7, 0xc7, 0x0e, 0x35, 0xd9, 0x19, 0xf1, 0x75, 0x3e, 0x0d, 0x67, 0x6b,
	0xc4, 0x75, 0x06, 0x71, 0x76, 0x64, 0x7c, 0x03, 0x5d, 0x6a, 0x90, 0x26, 0xb7, 0xfa, 0x20, 0x6f,
	0x35, 0x57, 0xa7, 0x4b, 0xea, 0xd5, 0xa8, 0x4a, 0x6f, 0x0f, 0xf3, 0x56, 0x1b, 0x8d, 0xaa, 0xf4,
	0xf6, 0xf0, 0xe9, 0xaa, 0xe4, 0x56, 0x9d, 0x66, 0x55, 0x52, 0xaf, 0x46, 0x55, 0xad, 0x61, 0x2b,
	0x6f, 0xd5, 0x6d, 0x54, 0xd5, 0x1a, 0xb6, 0x9e, 0xae, 0x4a, 0x6e, 0xd5, 0x6b, 0x56, 0x25, 0xf5,
	0x6a, 0xf6, 0x6a, 0xb8, 0x9e, 0xb7, 0xba, 0xd9, 0xec, 0xd5, 0x70, 0xfd, 0x1d, 0x78, 0x25, 0xb5,
	0xfa, 0xd0, 0x13, 0xbc, 0x2a, 0x7a, 0x75, 0xd0, 0x5c, 0xbd, 0x2a, 0x3b, 0x8e, 0xc4, 0x4b, 0xe2,
	0x56, 0xe3, 0x1e, 0xdb, 0x8b, 0x23, 0xfe, 0x9a, 0xe8, 0xa1, 0x8b, 0x0d, 0x7a, 0xf2, 0x26, 0xb7,
	0x9b, 0x37, 0xd9, 0xac, 0xcb, 0x26, 0xba, 0xdc, 0x70, 0x56, 0x3b, 0xc0, 0x31, 0xc9, 0xb7, 0xeb,
	0x3b, 0xbc, 0x53, 0xdd, 0x02, 0xdc, 0x61, 0x5c, 0xb6, 0x65, 0xbf, 0x85, 0xae, 0x34, 0x1d, 0xdd,
	0x4a, 0xed, 0xde, 0xe0, 0xed, 0x6a, 0xd7, 0x5f, 0xa9, 0x5f, 0x0b, 0x9d, 0x95, 0xd4, 0xd1, 0xc8,
	0xcf, 0x3f, 0x6f, 0xdf, 0xe4, 0x1d, 0x4e, 0xe5, 0x82, 0x76, 0x23, 0x3f, 0xfb, 0xca, 0x6d, 0xa3,
	0x73, 0xb2, 0x08, 0xb9, 0x6a, 0x53, 0x9c, 0x4c, 0x8a, 0x71, 0xa5, 0x32, 0xe5, 0x95, 0x9f, 0xbe,
	0x68, 0xb2, 0xca, 0x2d, 0xf5, 0x95, 0x2f, 0xf2, 0x59, 0xb1, 0xfa, 0xca, 0x57, 0xaa, 0xdf, 0xaa,
	0xbc, 0xf2, 0xcb, 0xe5, 0xe7, 0xd1, 0xa8, 0x13, 0xc5, 0x66, 0xe2, 0xfa, 0x04, 0x76, 0xe6, 0x47,
	0x16, 0x9f, 0xdd, 0x3d, 0xe1, 0x44, 0xf1, 0x5d, 0xd7, 0x27, 0xec, 0xf8, 0xc3, 0x52, 0x1e, 0x4e,
	0xdc, 0x64, 0x60, 0x13, 0xf8, 0xb0, 0x38, 0xfe, 0x38, 0x51, 0xbc, 0x99, 0x86, 0xd8, 0x91, 0x91,
	0x23, 0x61, 0xe0, 0x08, 0x66, 0x57, 0x9c, 0xde, 0x19, 0x93, 0xc5, 0xd8, 0xa1, 0x98, 0x41, 0xe2,
	0x84, 0xb6, 0x27, 0x0e, 0xc5, 0x4e, 0x14, 0x8b, 0x53, 0x59, 0x3a, 0x08, 0xf6, 0xd2, 0x41, 0xee,
	0xe6, 0x83, 0x6c, 0xa4, 0x21, 0xed, 0x22, 0x62, 0x7f, 0x9a, 0x7d, 0x82, 0xa9, 0x1b, 0x38, 0xf0,
	0x11, 0x71, 0x2d, 0xe0, 0x44, 0x71, 0x47, 0x44, 0xd8, 0x00, 0x1e, 0xb1, 0xd3, 0xaf, 0xdd, 0x7b,
	0xfc, 0xe8, 0x38, 0xea, 0x11, 0x5b, 0x7c, 0xed, 0x2e, 0xa2, 0x69, 0x3f, 0x8a, 0x12, 0x53, 0xbe,
	0x59, 0xf8, 0xa8, 0x38, 0x79, 0xb1, 0xf8, 0x46, 0x71, 0xbb, 0x70, 0x15, 0x4d, 0x71, 0x72, 0x63,
	0x49, 0x7c, 0xc5, 0xb8, 0x01, 0xdc, 0x17, 0x8f, 0xc3, 0xc1, 0x25, 0xb6, 0x84, 0xee, 0xb0, 0x6f,
	0xf5, 0xe9, 0x12, 0x16, 0x0e, 0x12, 0x78, 0x20, 0xce, 0x7c, 0x05, 0xb7, 0x3d, 0x48, 0xd8, 0xd9,
	0x30, 0x03, 0xb3, 0xd9, 0xf7, 0x50, 0xe6, 0xb2, 0xa9, 0x36, 0x8f, 0xc6, 0x33, 0x8e, 0xaf, 0x9d,
	0x8f, 0x89, 0x07, 0x14, 0x10, 0x5f, 0x2a, 0xb9, 0x32, 0x3d, 0x57, 0xf6, 0x71, 0x49, 0x99, 0xae,
	0x2a, 0xd3, 0x0b, 0x65, 0x9f, 0x90, 0x46, 0xd4, 0x2b, 0xca, 0xf4, 0x5c, 0xd9, 0x27, 0x65, 0xae,
	0xa2, 0x4c, 0x17, 0xca, 0x4c, 0x49, 0x99, 0x5e, 0x52, 0xd6, 0x29, 0x3c, 0xfb, 0x54, 0xa1, 0xac,
	0xa3, 0x7a, 0xd6, 0x91, 0x3c, 0xc3, 0xc5, 0x88, 0x9d, 0x8a, 0x67, 0x9d, 0xc2, 0xb3, 0xbe, 0xcc,
	0xa9, 0xca, 0x3a, 0xa9, 0x67, 0x56, 0xa1, 0xac, 0x53, 0xf6, 0xac, 0x53, 0x78, 0x66, 0x4b, 0xca,
	0x54, 0xcf, 0x3a, 0x92, 0x67, 0x44, 0x1a, 0xb1, 0xe2, 0x59, 0xa7, 0xf0, 0x6c, 0x5f, 0xe6, 0x2a,
	0xca, 0x52, 0xcf, 0x1c, 0x49, 0x59, 0xd9, 0xb3, 0x6e, 0xe1, 0xd9, 0x41, 0xa1, 0xac, 0xab, 0x7a,
	0xd6, 0x95, 0x3c, 0x73, 0x8b, 0x11, 0xbb, 0x15, 0xcf, 0xba, 0x85, 0x67, 0x9f, 0x96, 0x39, 0x55,
	0x59, 0x37, 0xf5, 0xec, 0x51, 0xa1, 0xac, 0x5b, 0xf6, 0xac, 0x5b, 0x78, 0xe6, 0x49, 0xca, 0x54,
	0xcf, 0xba, 0x92, 0x67, 0xbe, 0x34, 0x62, 0xc5, 0xb3, 0x6e, 0xe1, 0x59, 0x20, 0x73, 0x15, 0x65,
	0xa9, 0x67, 0xa1, 0xa4, 0xac, 0xec, 0x59, 0xaf, 0xf0, 0x2c, 0x2a, 0x94, 0xf5, 0x54, 0xcf, 0x7a,
	0x92, 0x67, 0x9f, 0x29, 0x46, 0xec, 0x55, 0x3c, 0xeb, 0x15, 0x9e, 0x51, 0x99, 0x53, 0x95, 0xf5,
	0x52, 0xcf, 0xe2, 0x42, 0x59, 0xaf, 0xec, 0x59, 0xaf, 0xf0, 0x2c, 0x91, 0x94, 0xa9, 0x9e, 0xf5,
	0x24, 0xcf, 0x06, 0xd2, 0x88, 0x15, 0xcf, 0x7a, 0x85, 0x67, 0x43, 0x99, 0xab, 0x28, 0x4b, 0x3d,
	0x3b, 0x94, 0x94, 0x09, 0xcf, 0xe6, 0xd0, 0x18, 0xbf, 0xc0, 0xe4, 0xe3, 0xe9, 0x70, 0xc4, 0x01,
	0x7e, 0x83, 0xc9, 0xc6, 0xd2, 0xcb, 0x79, 0x03, 0x8e, 0xcb, 0x79, 0xa3, 0x9c, 0x6f, 0xc1, 0xe3,
	0x72, 0xbe, 0x55, 0xce, 0x2f, 0xc3, 0x67, 0xcb, 0xf9, 0xe5, 0x72, 0xbe, 0x0d, 0x9f, 0x2b, 0xe7,
	0xdb, 0xe5, 0xfc, 0x0a, 0x7c, 0xbe, 0x9c, 0x5f, 0x29, 0xe7, 0x57, 0xe1, 0x0b, 0xe5, 0xfc, 0x6a,
	0x39, 0xbf, 0x06, 0x5f, 0x2c, 0xe7, 0xd7, 0xd8, 0x7b, 0xa3, 0xc8, 0xaf, 0xc3, 0x97, 0x46, 0xca,
	0xc0, 0x3a, 0xbf, 0xc2, 0x2d, 0x0c, 0x5a, 0x82, 0x2f, 0x0b, 0x02, 0xe5, 0x16, 0x2d, 0x29, 0x88,
	0x0e, 0x5f, 0x51, 0x11, 0x5d, 0x41, 0x0c, 0xf8, 0xaa, 0x8a, 0x18, 0x0a, 0xd2, 0x82, 0xaf, 0xa9,
	0x48, 0x4b, 0x41, 0x96, 0xe1, 0xeb, 0x2a, 0xb2, 0xac, 0x20, 0x6d, 0xf8, 0x86, 0x8a, 0xb4, 0x15,
	0x64, 0x05, 0xbe, 0xa9, 0x22, 0x2b, 0x0a, 0xb2, 0x0a, 0xdf, 0x52, 0x91, 0x55, 0x05, 0x59, 0x83,
	0x6f, 0xab, 0xc8, 0x9a, 0x82, 0xac, 0xc3, 0x77, 0x54, 0x44, 0x71, 0xd7, 0x58, 0x82, 0xef, 0x2a,
	0x88, 0xa1, 0xb8, 0x6b, 0xe8, 0xf0, 0x3d, 0x15, 0x51, 0xdc, 0x35, 0x0c, 0xf8, 0xbe, 0x8a, 0x28,
	0xee, 0x1a, 0x2d, 0xf8, 0x81, 0x8a, 0x28, 0xee, 0x1a, 0xcb, 0xf0, 0x43, 0x15, 0x51, 0xdc, 0x35,
	0xda, 0xf0, 0x23, 0x15, 0x51, 0xdc, 0x35, 0x56, 0xe0, 0xc7, 0x2a, 0xa2, 0xb8, 0x6b, 0xac, 0xc2,
	0x4f, 0x54, 0x44, 0x71, 0xd7, 0x58, 0x83, 0x9f, 0xaa, 0x88, 0xe2, 0xae, 0xb1, 0x0e, 0x3f, 0x53,
	0x11, 0xc5, 0xdd, 0xd6, 0x12, 0xfc, 0x5c, 0x41, 0x5a, 0x8a, 0xbb, 0x2d, 0x1d, 0x7e, 0xa1, 0x22,
	0x3a, 0x3b, 0xbf, 0x15, 0x88, 0xef, 0x06, 0xf0, 0xcb, 0x91, 0xf4, 0xdf, 0x18, 0x29, 0xb3, 0xe5,
	0x06, 0x0a, 0x84, 0x8f, 0xe0, 0x57, 0x2a, 0x84, 0x8f, 0xca, 0x10, 0x1e, 0x3a, 0xf0, 0x6b, 0x05,
	0xda, 0x18, 0x3a, 0xfc, 0x3f, 0x0f, 0x39, 0xc4, 0x2f, 0x52, 0x7e, 0x23, 0xa8, 0xf1, 0x8c, 0xe2,
	0x77, 0x27, 0x97, 0xd1, 0x04, 0x3f, 0xa7, 0x99, 0x31, 0x1e, 0xf2, 0x7b, 0xfe, 0xdf, 0x8e, 0xa4,
	0x17, 0xfd, 0x2c, 0xba, 0x87, 0x87, 0x64, 0x3b, 0xd0, 0xe6, 0xd1, 0x18, 0x25, 0x98, 0x0e, 0x5d,
	0x72, 0xc8, 0x90, 0xdf, 0x09, 0x04, 0x65, 0x31, 0x41, 0xf8, 0xae, 0x95, 0xdf, 0x29, 0xfe, 0x3e,
	0x25, 0x7c, 0xd7, 0xca, 0x2e, 0x12, 0x2f, 0xa0, 0x51, 0xd7, 0x1f, 0x88, 0xfd, 0xf3, 0x0f, 0x22,
	0x7d, 0xc2, 0xf5, 0x07, 0x7c, 0xf7, 0x5c, 0x40, 0xe3, 0x2c, 0xe7, 0x63, 0x27, 0x20, 0x89, 0x79,
	0x04, 0x7f, 0x4c, 0xcb, 0x5d, 0x7f, 0xb0, 0xc5, 0x63, 0xf7, 0x15, 0xe4, 0x18, 0xfe, 0xa4, 0x22,
	0x0f, 0x14, 0xe4, 0x31, 0xfc, 0x59, 0x45, 0x1e, 0x6a, 0xb3, 0x88, 0xfd, 0x65, 0x3a, 0xc7, 0x34,
	0x34, 0x8f, 0xe0, 0x2f, 0x02, 0x60, 0xba, 0x6e, 0x1d, 0xd3, 0xf0, 0x7e, 0x29, 0x7d, 0x0c, 0x7f,
	0x2d, 0xa7, 0x1f, 0x94, 0xd2, 0x8f, 0xe1, 0x6f, 0xe5, 0xf4, 0x43, 0xb6, 0x07, 0xb2, 0x34, 0xb6,
	0x2c, 0xe2, 0x99, 0x47, 0xf0, 0x77, 0x91, 0x3f, 0xe9, 0xfa, 0x83, 0x0d, 0x16, 0xba, 0x5f, 0x06,
	0x8e, 0xe1, 0x1f, 0x0a, 0xf0, 0xa0, 0x0c, 0x3c, 0x86, 0x7f, 0x2a, 0xc0, 0x43, 0xed, 0x0e, 0x5a,
	0xe8, 0xfb, 0xb1, 0xf9, 0xe4, 0x8b, 0xbb, 0x7f, 0x89, 0xdf, 0x79, 0xb6, 0xef, 0xc7, 0x9b, 0xcd,
	0x97, 0x77, 0x6f, 0xa2, 0x4b, 0xac, 0xd5, 0x53, 0x2e, 0xf0, 0xfe, 0x2d, 0x7a, 0xcd, 0xf5, 0xfd,
	0x78, 0xf7, 0x09, 0x97, 0x78, 0xb7, 0xd0, 0x3c, 0x6b, 0xd6, 0x78, 0x91, 0x17, 0x0f, 0x7c, 0xf8,
	0x8f, 0x68, 0xf5, 0x42, 0xdf, 0x8f, 0xeb, 0xbb, 0xec, 0x0d, 0x7c, 0xed, 0x3a, 0x9a, 0x8a, 0xb0,
	0xf5, 0x88, 0x24, 0xb1, 0x19, 0xb1, 0x49, 0x49, 0x2c, 0xf8, 0xaf, 0xa8, 0x9b, 0x48, 0xe3, 0x3b,
	0x84, 0xee, 0x11, 0x4b, 0xbb, 0x86, 0x26, 0xd9, 0x77, 0x94, 0x69, 0xb1, 0x0e, 0x56, 0x42, 0x6c,
	0xf8, 0xdf, 0x08, 0xff, 0xa4, 0x9a, 0x60, 0xe1, 0x6e, 0x16, 0x7d, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0xf6, 0x37, 0x32, 0x89, 0x1d, 0x00, 0x00,
}
